import enum
from sqlalchemy import Column, String, Integer, ForeignKey, Enum
from sqlalchemy.orm import relationship
from .base import Base


class BrainResponseType(enum.Enum):
    SQL = "sql"
    CHART = "chart"
    CLARIFYING_QUESTION = "clarifying_question"


class BrainResponseData(Base):
    """
    In the general case, it is a script that can be used in the chain.
    The main thing that the object should store:
    1) Input: what it started working on;
    2) Output: the result of the work;
    3) Additional information.

    Attributes:
        id (int): The unique identifier for the brain response data.
        user_request_ray_id (str): The ray ID of the associated user request.
        type (BrainResponseType): The type of brain response.
        question (str): The input or question that triggered the brain response.
        answer (str): The output or answer generated by the brain response.
        sql_script (str): The SQL script involved in the processing chain.
        user_request (UserRequest): The associated user request object.
    """

    __tablename__ = "brain_response_data"

    id = Column(Integer, primary_key=True, autoincrement=True)
    user_request_ray_id = Column(
        String, ForeignKey("user_request.ray_id"), nullable=False
    )
    type = Column(
        Enum(BrainResponseType),
        nullable=False,
        default=BrainResponseType.SQL,
        name="type",
    )
    question = Column(String, nullable=False)
    answer = Column(String, nullable=True)
    sql_script = Column(String, nullable=True)

    user_request = relationship("UserRequest", back_populates="brain_responses")
