2023-03-15 17:07:41,746 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 17:07:41,845 - tg_bot.correction - INFO | For question 'city of the organization with the largest pupils amount' following corrections returned:
2023-03-15 17:07:41,845 - tg_bot.correction - INFO | ["first names of 100 parent of pupils from first classes", "first names of 100 pupils from first classes", "second names of 100 pupils from first classes"]
2023-03-15 17:07:41,845 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 17:07:41,845 - answering.answering - INFO | Prompt builded
2023-03-15 17:07:41,845 - answering.answering - INFO | Generation AI answers
2023-03-15 17:07:41,845 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 17:07:41,845 - ai - INFO | Trying 0...
2023-03-15 17:07:41,845 - ai - INFO | Asking AI...
2023-03-15 17:10:02,794 - __main__ - INFO | Start application
2023-03-15 17:10:03,269 - telegram.ext._application - INFO | Application started
2023-03-15 17:10:06,236 - tg_bot.tg_main - INFO | answering question started
2023-03-15 17:10:06,370 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 17:10:06,488 - tg_bot.correction - INFO | For question 'city of the organization with the largest pupils amount' following corrections returned:
2023-03-15 17:10:06,488 - tg_bot.correction - INFO | ["first names of 100 parent of pupils from first classes", "first names of 100 pupils from first classes", "second names of 100 pupils from first classes"]
2023-03-15 17:10:06,489 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 17:10:06,489 - answering.answering - INFO | Prompt builded
2023-03-15 17:10:06,489 - answering.answering - INFO | Generation AI answers
2023-03-15 17:10:06,489 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 17:10:06,489 - ai - INFO | Trying 1...
2023-03-15 17:10:06,489 - ai - INFO | Asking AI...
2023-03-15 17:11:09,089 - tg_bot.tg_main - ERROR | choi�es
Traceback (most recent call last):
  File "c:\Users\Maxim\Documents\Coding\DataMonsterAI\.venv\Lib\site-packages\openai\openai_object.py", line 59, in __getattr__
    return self[k]
           ~~~~^^^
KeyError: 'choi�es'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Maxim\Documents\Coding\DataMonsterAI\tg_bot\tg_main.py", line 37, in answer_question
    answer = answering.answer(question)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Maxim\Documents\Coding\DataMonsterAI\answering\answering.py", line 22, in answer
    ai_db_requests = ai.generate_answer_code(prompt)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Maxim\Documents\Coding\DataMonsterAI\ai.py", line 78, in generate_answer_code
    ai_responses = get_ai_responses_with_retries(prompt, LimitRetries, RetriesTimeoutSeconds)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Maxim\Documents\Coding\DataMonsterAI\ai.py", line 64, in get_ai_responses_with_retries
    return get_ai_responses(prompt)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Maxim\Documents\Coding\DataMonsterAI\ai.py", line 47, in get_ai_responses
    str_ai_answers = ', '.join(map(lambda x: f'[{x.finish_reason}]', response.choi�es))
                                                                     ^^^^^^^^^^^^^^^^
  File "c:\Users\Maxim\Documents\Coding\DataMonsterAI\.venv\Lib\site-packages\openai\openai_object.py", line 61, in __getattr__
    raise AttributeError(*err.args)
AttributeError: choi�es
2023-03-15 17:11:09,090 - tg_bot.tg_main - WARNING | error due building answer: choi�es
2023-03-15 17:11:39,140 - __main__ - INFO | Start application
2023-03-15 17:11:39,620 - telegram.ext._application - INFO | Application started
2023-03-15 17:12:24,175 - tg_bot.tg_main - INFO | answering question started
2023-03-15 17:12:24,523 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 17:12:24,616 - tg_bot.correction - INFO | For question 'city of the organization with the largest pupils amount' following corrections returned:
2023-03-15 17:12:24,616 - tg_bot.correction - INFO | ["first names of 100 parent of pupils from first classes", "first names of 100 pupils from first classes", "second names of 100 pupils from first classes"]
2023-03-15 17:12:24,616 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 17:12:24,617 - answering.answering - INFO | Prompt builded
2023-03-15 17:12:24,617 - answering.answering - INFO | Generation AI answers
2023-03-15 17:12:24,617 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 17:12:24,617 - ai - INFO | Trying 1...
2023-03-15 17:12:24,617 - ai - INFO | Asking AI...
2023-03-15 17:13:22,725 - ai - INFO | AI code-davinci-002/57192ms. Tokens: 6254prompt, 90completion. Answers-metadata: [stop]
2023-03-15 17:13:22,726 - ai - INFO | There are 1 correct answers
2023-03-15 17:13:22,726 - answering.answering - INFO | 1 AI answers generated
2023-03-15 17:13:22,733 - answering.answering - INFO | Answer generated
2023-03-15 17:13:22,745 - answering.answering - INFO | {"answer_result": {"full_name": {"0": "\u041c\u0423\u041d\u0418\u0426\u0418\u041f\u0410\u041b\u042c\u041d\u041e\u0415 \u0410\u0412\u0422\u041e\u041d\u041e\u041c\u041d\u041e\u0415 \u041e\u0411\u0429\u0415\u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u041d\u041e\u0415 \u0423\u0427\u0420\u0415\u0416\u0414\u0415\u041d\u0418\u0415 \u0421\u0420\u0415\u0414\u041d\u042f\u042f \u0428\u041a\u041e\u041b\u0410 \u2116 53"}, "count": {"0": 1548}}, "answer_code": "SELECT  schools.full_name, COUNT(pupils.id)\nFROM schools\nINNER JOIN pupil_classes ON schools.id = pupil_classes.school_id\nINNER JOIN pupils ON pupil_classes.id = pupils.pupil_class_id\nGROUP BY schools.full_name\nORDER BY COUNT(pupils.id) DESC\nLIMIT 1\n", "type": null}
2023-03-15 17:13:22,747 - answering.answering - INFO | Answer type changed to AnswerType.TABLE
2023-03-15 17:13:22,747 - tg_bot.tg_main - INFO | answer builded successful
2023-03-15 17:20:43,276 - tg_bot.tg_main - INFO | answering question started
2023-03-15 17:20:43,634 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 17:20:43,730 - tg_bot.correction - INFO | For question 'total pupils in schools with name like '�����'' following corrections returned:
2023-03-15 17:20:43,730 - tg_bot.correction - INFO | ["names of menu items in school 12", "second names of 100 pupils from first classes", "first names of 100 pupils from first classes"]
2023-03-15 17:20:43,731 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 17:20:43,731 - answering.answering - INFO | Prompt builded
2023-03-15 17:20:43,731 - answering.answering - INFO | Generation AI answers
2023-03-15 17:20:43,731 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 17:20:43,731 - ai - INFO | Trying 1...
2023-03-15 17:20:43,731 - ai - INFO | Asking AI...
2023-03-15 17:21:26,376 - ai - INFO | AI code-davinci-002/41700ms. Tokens: 6305prompt, 71completion. Answers-metadata: [stop]
2023-03-15 17:21:26,376 - ai - INFO | There are 1 correct answers
2023-03-15 17:21:26,376 - answering.answering - INFO | 1 AI answers generated
2023-03-15 17:21:26,379 - answering.answering - INFO | Answer generated
2023-03-15 17:21:26,379 - answering.answering - INFO | {"answer_result": {"count": {"0": 0}}, "answer_code": "SELECT  COUNT(*)\nFROM pupils\nINNER JOIN pupil_classes ON pupils.pupil_class_id = pupil_classes.id\nINNER JOIN schools ON pupil_classes.school_id = schools.id\nWHERE schools.full_name like '%\u041b\u0438\u0446\u0435\u0439%'\n", "type": null}
2023-03-15 17:21:26,379 - answering.answering - INFO | Answer type changed to AnswerType.NUMBER
2023-03-15 17:21:26,380 - tg_bot.tg_main - INFO | answer builded successful
2023-03-15 17:23:47,476 - tg_bot.tg_main - INFO | answering question started
2023-03-15 17:23:47,822 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 17:23:47,909 - tg_bot.correction - INFO | For question 'short names of all schools' following corrections returned:
2023-03-15 17:23:47,909 - tg_bot.correction - INFO | ["names of menu items in school 12", "first names of 100 pupils from first classes", "second names of 100 pupils from first classes"]
2023-03-15 17:23:47,909 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 17:23:47,910 - answering.answering - INFO | Prompt builded
2023-03-15 17:23:47,910 - answering.answering - INFO | Generation AI answers
2023-03-15 17:23:47,910 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 17:23:47,910 - ai - INFO | Trying 1...
2023-03-15 17:23:47,910 - ai - INFO | Asking AI...
2023-03-15 17:23:58,105 - ai - INFO | AI code-davinci-002/9224ms. Tokens: 6293prompt, 19completion. Answers-metadata: [stop]
2023-03-15 17:23:58,105 - ai - INFO | There are 1 correct answers
2023-03-15 17:23:58,105 - answering.answering - INFO | 1 AI answers generated
2023-03-15 17:23:58,117 - answering.answering - INFO | Answer generated
2023-03-15 17:23:58,117 - answering.answering - INFO | {"answer_result": {"short_name": {"0": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "1": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "2": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "3": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "4": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "5": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "6": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a"}}, "answer_code": "SELECT  schools.short_name\nFROM schools\nORDER BY schools.short_name\n", "type": null}
2023-03-15 17:23:58,117 - answering.answering - INFO | Answer type changed to AnswerType.TABLE
2023-03-15 17:23:58,118 - tg_bot.tg_main - INFO | answer builded successful
2023-03-15 17:26:45,249 - tg_bot.tg_main - INFO | answering question started
2023-03-15 17:26:45,595 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 17:26:45,681 - tg_bot.correction - INFO | For question 'total pupils in schools with name like '�����' case insensitive' following corrections returned:
2023-03-15 17:26:45,681 - tg_bot.correction - INFO | ["names of menu items in school 12", "second names of 100 pupils from first classes", "first names of 100 pupils from first classes"]
2023-03-15 17:26:45,681 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 17:26:45,682 - answering.answering - INFO | Prompt builded
2023-03-15 17:26:45,682 - answering.answering - INFO | Generation AI answers
2023-03-15 17:26:45,682 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 17:26:45,682 - ai - INFO | Trying 1...
2023-03-15 17:26:45,682 - ai - INFO | Asking AI...
2023-03-15 17:27:52,484 - ai - INFO | AI code-davinci-002/27430ms. Tokens: 6307prompt, 73completion. Answers-metadata: [stop]
2023-03-15 17:27:52,484 - ai - INFO | There are 1 correct answers
2023-03-15 17:27:52,484 - answering.answering - INFO | 1 AI answers generated
2023-03-15 17:27:52,496 - answering.answering - INFO | Answer generated
2023-03-15 17:27:52,497 - answering.answering - INFO | {"answer_result": {"count": {"0": 1976}}, "answer_code": "SELECT  COUNT(*)\nFROM pupils\nINNER JOIN pupil_classes ON pupils.pupil_class_id = pupil_classes.id\nINNER JOIN schools ON pupil_classes.school_id = schools.id\nWHERE schools.full_name ILIKE '%\u041b\u0438\u0446\u0435\u0439%'\n", "type": null}
2023-03-15 17:27:52,497 - answering.answering - INFO | Answer type changed to AnswerType.NUMBER
2023-03-15 17:27:52,497 - tg_bot.tg_main - INFO | answer builded successful
2023-03-15 17:34:41,023 - tg_bot.tg_main - INFO | answering question started
2023-03-15 17:34:41,479 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 17:34:41,568 - tg_bot.correction - INFO | For question 'the oldest pupil in each school' following corrections returned:
2023-03-15 17:34:41,568 - tg_bot.correction - INFO | ["names of menu items in school 12", "second names of 100 pupils from first classes", "first names of 100 pupils from first classes"]
2023-03-15 17:34:41,568 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 17:34:41,569 - answering.answering - INFO | Prompt builded
2023-03-15 17:34:41,569 - answering.answering - INFO | Generation AI answers
2023-03-15 17:34:41,569 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 17:34:41,569 - ai - INFO | Trying 1...
2023-03-15 17:34:41,569 - ai - INFO | Asking AI...
2023-03-15 17:35:56,597 - ai - INFO | AI code-davinci-002/47378ms. Tokens: 6294prompt, 200completion. Answers-metadata: [stop]
2023-03-15 17:35:56,597 - ai - INFO | There are 1 correct answers
2023-03-15 17:35:56,597 - answering.answering - INFO | 1 AI answers generated
2023-03-15 17:35:56,647 - answering.answering - INFO | Answer generated
2023-03-15 17:35:56,648 - answering.answering - INFO | {"answer_result": {"first_name": {"0": "\u0412\u0430\u0441\u0438\u043b\u0438\u0439"}, "last_name": {"0": "\u041a\u0443\u0437\u043d\u0435\u0446\u043e\u0432"}, "full_name": {"0": "\u041c\u0423\u041d\u0418\u0426\u0418\u041f\u0410\u041b\u042c\u041d\u041e\u0415 \u0411\u042e\u0414\u0416\u0415\u0422\u041d\u041e\u0415 \u041e\u0411\u0429\u0415\u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u041d\u041e\u0415 \u0423\u0427\u0420\u0415\u0416\u0414\u0415\u041d\u0418\u0415 \u0421\u0420\u0415\u0414\u041d\u042f\u042f \u0428\u041a\u041e\u041b\u0410 \u2116 31"}, "date_birth": {"0": 1463011200000}}, "answer_code": "SELECT  base_users.first_name, base_users.last_name, schools.full_name, base_users.date_birth\nFROM pupils\nINNER JOIN pupil_classes ON pupils.pupil_class_id = pupil_classes.id\nINNER JOIN base_users ON pupils.base_user_id = base_users.id\nINNER JOIN schools ON pupil_classes.school_id = schools.id\nWHERE base_users.date_birth = (SELECT MAX(base_users.date_birth) FROM pupils\nINNER JOIN pupil_classes ON pupils.pupil_class_id = pupil_classes.id\nINNER JOIN base_users ON pupils.base_user_id = base_users.id\nINNER JOIN schools ON pupil_classes.school_id = schools.id\nWHERE schools.full_name = schools.full_name)\n", "type": null}
2023-03-15 17:35:56,648 - answering.answering - INFO | Answer type changed to AnswerType.TABLE
2023-03-15 17:35:56,649 - tg_bot.tg_main - INFO | answer builded successful
2023-03-15 18:10:50,859 - tg_bot.correction - INFO | Started correction
2023-03-15 18:10:51,230 - tg_bot.correction - INFO | For question the oldest pupil in each school
2023-03-15 18:10:51,433 - tg_bot.correction - INFO | Waiting for correction...
2023-03-15 18:10:56,965 - tg_bot.correction - INFO | Added correction for question: the oldest pupil in each school
2023-03-15 18:12:05,313 - tg_bot.tg_main - INFO | answering question started
2023-03-15 18:12:05,667 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 18:12:05,754 - tg_bot.correction - INFO | For question 'the oldest pupil in each school' following corrections returned:
2023-03-15 18:12:05,755 - tg_bot.correction - INFO | ["the oldest pupil in each school", "names of menu items in school 12", "second names of 100 pupils from first classes"]
2023-03-15 18:12:05,755 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 18:12:05,755 - answering.answering - INFO | Prompt builded
2023-03-15 18:12:05,755 - answering.answering - INFO | Generation AI answers
2023-03-15 18:12:05,755 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 18:12:05,755 - ai - INFO | Trying 1...
2023-03-15 18:12:05,755 - ai - INFO | Asking AI...
2023-03-15 18:14:46,488 - ai - INFO | AI code-davinci-002/73522ms. Tokens: 6387prompt, 150completion. Answers-metadata: [stop]
2023-03-15 18:14:46,488 - ai - INFO | There are 1 correct answers
2023-03-15 18:14:46,488 - answering.answering - INFO | 1 AI answers generated
2023-03-15 18:14:46,498 - answering.answering - INFO | Answer generated
2023-03-15 18:14:46,499 - answering.answering - INFO | {"answer_result": {"short_name": {"0": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "1": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "2": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "3": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "4": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "5": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "6": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12"}, "concat": {"0": "\u0410\u043d\u0433\u0435\u043b\u0438\u043d\u0430 \u041a\u0440\u043e\u043d\u0435\u0432\u0430\u043b\u044c\u0434", "1": "\u0421\u0430\u0431\u0440\u0438\u043d\u0430 \u041c\u0443\u0445\u0430\u043c\u0430\u0434\u0438\u0435\u0432\u0430", "2": "\u0414\u0435\u043c\u0438\u0434 \u0413\u0430\u0442\u0430\u0443\u043b\u0438\u043d", "3": "\u0410\u0437\u0438\u0437\u0431\u0435\u043a \u0418\u0441\u043c\u0430\u0438\u043b\u043e\u0432", "4": "\u041d\u0443\u0440\u0430\u0439\u044b\u043c \u0416\u0430\u043d\u044b\u0448\u0431\u0435\u043a\u043e\u0432\u0430", "5": "\u0410\u043d\u0434\u0440\u0435\u0439 \u0428\u0432\u043e\u0440\u0435\u043d\u044c", "6": "\u0410\u043d\u0434\u0440\u0435\u0439 \u0418\u043a\u043e\u043d\u043d\u0438\u043a\u043e\u0432"}, "date_birth": {"0": 1100649600000, "1": 1120608000000, "2": 1084233600000, "3": 1093564800000, "4": 1082592000000, "5": 1101686400000, "6": 1102636800000}, "rank": {"0": 1, "1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1}}, "answer_code": "SELECT  *\nFROM\n (SELECT\n  schools.short_name,\n  CONCAT(base_users.first_name, ' ', base_users.last_name),\n  base_users.date_birth,\n  rank() OVER (PARTITION BY schools.id ORDER BY base_users.date_birth) as rank\n FROM pupils\n INNER JOIN pupil_classes ON pupils.pupil_class_id = pupil_classes.id\n INNER JOIN base_users ON pupils.base_user_id = base_users.id\n INNER JOIN schools ON pupil_classes.school_id = schools.id\n ) as ss\nWHERE rank = 1\n\n", "type": null}
2023-03-15 18:14:46,499 - answering.answering - INFO | Answer type changed to AnswerType.TABLE
2023-03-15 18:14:46,499 - tg_bot.tg_main - INFO | answer builded successful
2023-03-15 18:15:16,976 - tg_bot.tg_main - INFO | answering question started
2023-03-15 18:15:17,340 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 18:15:17,426 - tg_bot.correction - INFO | For question 'the youngest pupil in each school' following corrections returned:
2023-03-15 18:15:17,426 - tg_bot.correction - INFO | ["the oldest pupil in each school", "names of menu items in school 12", "second names of 100 pupils from first classes"]
2023-03-15 18:15:17,426 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 18:15:17,426 - answering.answering - INFO | Prompt builded
2023-03-15 18:15:17,426 - answering.answering - INFO | Generation AI answers
2023-03-15 18:15:17,426 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 18:15:17,426 - ai - INFO | Trying 1...
2023-03-15 18:15:17,426 - ai - INFO | Asking AI...
2023-03-15 18:15:52,219 - ai - INFO | AI code-davinci-002/34518ms. Tokens: 6387prompt, 152completion. Answers-metadata: [None]
2023-03-15 18:15:52,219 - ai - INFO | There are 0 correct answers
2023-03-15 18:15:52,220 - tg_bot.tg_main - WARNING | error due building answer: AI answer was long or infinite. Try to increase 'max_tokens' or change the prompt.
2023-03-15 18:18:04,130 - __main__ - INFO | Start application
2023-03-15 18:18:04,598 - telegram.ext._application - INFO | Application started
2023-03-15 18:18:08,584 - tg_bot.tg_main - INFO | answering question started
2023-03-15 18:18:08,725 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 18:18:08,819 - tg_bot.correction - INFO | For question 'the youngest pupil in each school' following corrections returned:
2023-03-15 18:18:08,820 - tg_bot.correction - INFO | ["the oldest pupil in each school", "names of menu items in school 12", "second names of 100 pupils from first classes"]
2023-03-15 18:18:08,820 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 18:18:08,820 - answering.answering - INFO | Prompt builded
2023-03-15 18:18:08,820 - answering.answering - INFO | Generation AI answers
2023-03-15 18:18:08,820 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 18:18:08,820 - ai - INFO | Trying 1...
2023-03-15 18:18:08,820 - ai - INFO | Asking AI...
2023-03-15 18:18:49,789 - ai - INFO | AI code-davinci-002/39996ms. Tokens: 6387prompt, 152completion. Answers-metadata: [stop]
2023-03-15 18:18:49,789 - ai - INFO | There are 1 correct answers
2023-03-15 18:18:49,789 - answering.answering - INFO | 1 AI answers generated
2023-03-15 18:18:49,801 - answering.answering - INFO | Answer generated
2023-03-15 18:18:49,802 - answering.answering - INFO | {"answer_result": {"short_name": {"0": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "1": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "2": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "3": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "4": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "5": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "6": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12"}, "concat": {"0": "\u0414\u0430\u0440\u044c\u044f \u041b\u0435\u0442\u044f\u0433\u0430", "1": "\u0412\u0430\u0441\u0438\u043b\u0438\u0439 \u041a\u0443\u0437\u043d\u0435\u0446\u043e\u0432", "2": "\u0414\u0430\u0443\u0434 \u0418\u0431\u0440\u0430\u0433\u0438\u043c\u043e\u0432", "3": "\u041a\u0441\u0435\u043d\u0438\u044f \u0421\u0430\u043c\u043e\u0440\u043e\u043a\u043e\u0432\u0430", "4": "\u041d\u0430\u0437\u0435\u043b\u0438 \u0410\u043a\u0443\u043d\u043e\u0432\u0430", "5": "\u0412\u0430\u0441\u0438\u043b\u0438\u0441\u0430 \u0412\u0430\u0441\u0438\u043b\u044c\u0435\u0432\u0430", "6": "\u0415\u0432\u0430 \u041b\u0435\u0431\u0435\u0434\u0435\u0432\u0430"}, "date_birth": {"0": 1453161600000, "1": 1463011200000, "2": 1456790400000, "3": 1454630400000, "4": 1454025600000, "5": 1451520000000, "6": 1459900800000}, "rank": {"0": 1, "1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1}}, "answer_code": "SELECT  *\nFROM\n (SELECT\n  schools.short_name,\n  CONCAT(base_users.first_name, ' ', base_users.last_name),\n  base_users.date_birth,\n  rank() OVER (PARTITION BY schools.id ORDER BY base_users.date_birth DESC) as rank\n FROM pupils\n INNER JOIN pupil_classes ON pupils.pupil_class_id = pupil_classes.id\n INNER JOIN base_users ON pupils.base_user_id = base_users.id\n INNER JOIN schools ON pupil_classes.school_id = schools.id\n ) as ss\nWHERE rank = 1\n\n", "type": null}
2023-03-15 18:18:49,802 - answering.answering - INFO | Answer type changed to AnswerType.TABLE
2023-03-15 18:18:49,802 - tg_bot.tg_main - INFO | answer builded successful
2023-03-15 18:21:17,063 - tg_bot.tg_main - INFO | answering question started
2023-03-15 18:21:17,463 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 18:21:17,570 - tg_bot.correction - INFO | For question 'count of pupils in each class in school � 31' following corrections returned:
2023-03-15 18:21:17,571 - tg_bot.correction - INFO | ["the oldest pupil in each school", "first names of 100 pupils from first classes", "first names of 100 parent of pupils from first classes"]
2023-03-15 18:21:17,571 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 18:21:17,571 - answering.answering - INFO | Prompt builded
2023-03-15 18:21:17,571 - answering.answering - INFO | Generation AI answers
2023-03-15 18:21:17,571 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 18:21:17,571 - ai - INFO | Trying 1...
2023-03-15 18:21:17,571 - ai - INFO | Asking AI...
2023-03-15 18:22:02,928 - ai - INFO | AI code-davinci-002/44380ms. Tokens: 6350prompt, 137completion. Answers-metadata: [stop]
2023-03-15 18:22:02,928 - ai - INFO | There are 1 correct answers
2023-03-15 18:22:02,928 - answering.answering - INFO | 1 AI answers generated
2023-03-15 18:22:02,935 - answering.answering - INFO | Answer generated
2023-03-15 18:22:02,935 - answering.answering - INFO | {"answer_result": null, "answer_code": "SELECT \n  schools.short_name,\n  pupil_classes.degree,\n  pupil_classes.literal,\n  COUNT(pupils.id)\nFROM pupils\nINNER JOIN pupil_classes ON pupils.pupil_class_id = pupil_classes.id\nINNER JOIN schools ON pupil_classes.school_id = schools.id\nWHERE schools.short_name = '31'\nGROUP BY schools.short_name, pupil_classes.degree, pupil_classes.literal\nORDER BY schools.short_name, pupil_classes.degree, pupil_classes.literal\n", "type": "NO_DATA"}
2023-03-15 18:22:02,935 - tg_bot.tg_main - INFO | answer builded successful
2023-03-15 18:22:46,667 - tg_bot.tg_main - INFO | answering question started
2023-03-15 18:22:47,014 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 18:22:47,209 - tg_bot.correction - INFO | For question 'count of pupils in each class in school like � 31' following corrections returned:
2023-03-15 18:22:47,209 - tg_bot.correction - INFO | ["the oldest pupil in each school", "first names of 100 pupils from first classes", "first names of 100 parent of pupils from first classes"]
2023-03-15 18:22:47,209 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 18:22:47,209 - answering.answering - INFO | Prompt builded
2023-03-15 18:22:47,209 - answering.answering - INFO | Generation AI answers
2023-03-15 18:22:47,209 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 18:22:47,209 - ai - INFO | Trying 1...
2023-03-15 18:22:47,210 - ai - INFO | Asking AI...
2023-03-15 18:23:36,528 - ai - INFO | AI code-davinci-002/49037ms. Tokens: 6351prompt, 137completion. Answers-metadata: [stop]
2023-03-15 18:23:36,528 - ai - INFO | There are 1 correct answers
2023-03-15 18:23:36,528 - answering.answering - INFO | 1 AI answers generated
2023-03-15 18:23:36,531 - answering.answering - INFO | Answer generated
2023-03-15 18:23:36,531 - answering.answering - INFO | {"answer_result": null, "answer_code": "SELECT \n  schools.short_name,\n  pupil_classes.degree,\n  pupil_classes.literal,\n  COUNT(pupils.id)\nFROM pupils\nINNER JOIN pupil_classes ON pupils.pupil_class_id = pupil_classes.id\nINNER JOIN schools ON pupil_classes.school_id = schools.id\nWHERE schools.short_name = '31'\nGROUP BY schools.short_name, pupil_classes.degree, pupil_classes.literal\nORDER BY schools.short_name, pupil_classes.degree, pupil_classes.literal\n", "type": "NO_DATA"}
2023-03-15 18:23:36,531 - tg_bot.tg_main - INFO | answer builded successful
2023-03-15 18:24:07,209 - tg_bot.tg_main - INFO | answering question started
2023-03-15 18:24:07,552 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 18:24:07,747 - tg_bot.correction - INFO | For question 'count of pupils in each class in school with name like 31' following corrections returned:
2023-03-15 18:24:07,747 - tg_bot.correction - INFO | ["the oldest pupil in each school", "first names of 100 pupils from first classes", "first names of 100 parent of pupils from first classes"]
2023-03-15 18:24:07,747 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 18:24:07,747 - answering.answering - INFO | Prompt builded
2023-03-15 18:24:07,747 - answering.answering - INFO | Generation AI answers
2023-03-15 18:24:07,747 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 18:24:07,747 - ai - INFO | Trying 1...
2023-03-15 18:24:07,747 - ai - INFO | Asking AI...
2023-03-15 18:24:44,177 - ai - INFO | AI code-davinci-002/36148ms. Tokens: 6350prompt, 132completion. Answers-metadata: [stop]
2023-03-15 18:24:44,177 - ai - INFO | There are 1 correct answers
2023-03-15 18:24:44,177 - answering.answering - INFO | 1 AI answers generated
2023-03-15 18:24:44,178 - answering.answering - INFO | Answer generated
2023-03-15 18:24:44,179 - answering.answering - INFO | {"answer_result": null, "answer_code": "SELECT \n  schools.short_name,\n  pupil_classes.degree,\n  pupil_classes.literal,\n  count(*)\nFROM pupils\nINNER JOIN pupil_classes ON pupils.pupil_class_id = pupil_classes.id\nINNER JOIN schools ON pupil_classes.school_id = schools.id\nWHERE schools.short_name LIKE '31%'\nGROUP BY schools.short_name, pupil_classes.degree, pupil_classes.literal\nORDER BY schools.short_name, pupil_classes.degree, pupil_classes.literal\n", "type": "NO_DATA"}
2023-03-15 18:24:44,179 - tg_bot.tg_main - INFO | answer builded successful
2023-03-15 18:25:44,498 - tg_bot.tg_main - INFO | answering question started
2023-03-15 18:25:44,910 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 18:25:44,999 - tg_bot.correction - INFO | For question 'count of pupils in each class in school with name like � 31' following corrections returned:
2023-03-15 18:25:45,000 - tg_bot.correction - INFO | ["the oldest pupil in each school", "first names of 100 pupils from first classes", "first names of 100 parent of pupils from first classes"]
2023-03-15 18:25:45,000 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 18:25:45,000 - answering.answering - INFO | Prompt builded
2023-03-15 18:25:45,000 - answering.answering - INFO | Generation AI answers
2023-03-15 18:25:45,000 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 18:25:45,000 - ai - INFO | Trying 1...
2023-03-15 18:25:45,000 - ai - INFO | Asking AI...
2023-03-15 18:27:19,330 - ai - INFO | AI code-davinci-002/76153ms. Tokens: 6353prompt, 138completion. Answers-metadata: [stop]
2023-03-15 18:27:19,331 - ai - INFO | There are 1 correct answers
2023-03-15 18:27:19,331 - answering.answering - INFO | 1 AI answers generated
2023-03-15 18:27:19,344 - answering.answering - INFO | Answer generated
2023-03-15 18:27:19,345 - answering.answering - INFO | {"answer_result": {"short_name": {"0": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "1": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "2": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "3": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "4": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "5": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "6": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "7": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "8": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "9": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "10": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "11": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "12": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "13": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "14": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "15": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "16": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "17": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "18": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "19": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "20": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "21": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "22": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "23": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "24": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "25": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31"}, "degree": {"0": 1, "1": 1, "2": 1, "3": 2, "4": 2, "5": 2, "6": 3, "7": 3, "8": 4, "9": 4, "10": 4, "11": 5, "12": 5, "13": 5, "14": 6, "15": 6, "16": 6, "17": 7, "18": 7, "19": 7, "20": 8, "21": 8, "22": 8, "23": 9, "24": 9, "25": 10}, "literal": {"0": "\u0410", "1": "\u0411", "2": "\u0412", "3": "\u0410", "4": "\u0411", "5": "\u0412", "6": "\u0410", "7": "\u0411", "8": "\u0410", "9": "\u0411", "10": "\u0412", "11": "\u0410", "12": "\u0411", "13": "\u0412", "14": "\u0410", "15": "\u0411", "16": "\u0412", "17": "\u0410", "18": "\u0411", "19": "\u0412", "20": "\u0410", "21": "\u0411", "22": "\u0412", "23": "\u0410", "24": "\u0411", "25": "\u0410"}, "count": {"0": 29, "1": 29, "2": 28, "3": 20, "4": 26, "5": 22, "6": 28, "7": 30, "8": 24, "9": 18, "10": 19, "11": 27, "12": 28, "13": 28, "14": 22, "15": 25, "16": 21, "17": 29, "18": 28, "19": 28, "20": 25, "21": 25, "22": 22, "23": 28, "24": 27, "25": 30}}, "answer_code": "SELECT \n  schools.short_name,\n  pupil_classes.degree,\n  pupil_classes.literal,\n  count(pupils.id)\nFROM pupils\nINNER JOIN pupil_classes ON pupils.pupil_class_id = pupil_classes.id\nINNER JOIN schools ON pupil_classes.school_id = schools.id\nWHERE schools.short_name LIKE '%31%'\nGROUP BY schools.short_name, pupil_classes.degree, pupil_classes.literal\nORDER BY schools.short_name, pupil_classes.degree, pupil_classes.literal\n", "type": null}
2023-03-15 18:27:19,345 - answering.answering - INFO | Answer type changed to AnswerType.TABLE
2023-03-15 18:27:19,345 - tg_bot.tg_main - INFO | answer builded successful
2023-03-15 18:28:48,207 - tg_bot.tg_main - INFO | answering question started
2023-03-15 18:28:48,699 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 18:28:48,903 - tg_bot.correction - INFO | For question 'suggest insightful sql request' following corrections returned:
2023-03-15 18:28:48,903 - tg_bot.correction - INFO | ["the oldest pupil in each school", "names of menu items in school 12", "second names of 100 pupils from first classes"]
2023-03-15 18:28:48,903 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 18:28:48,903 - answering.answering - INFO | Prompt builded
2023-03-15 18:28:48,903 - answering.answering - INFO | Generation AI answers
2023-03-15 18:28:48,903 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 18:28:48,903 - ai - INFO | Trying 1...
2023-03-15 18:28:48,904 - ai - INFO | Asking AI...
2023-03-15 18:29:19,883 - openai - INFO | error_code=None error_message='That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 1b3b090275f2d9a38a223b21490b468b in your message.)' error_param=None error_type=server_error message='OpenAI API error received' stream_error=False
2023-03-15 18:29:19,883 - ai - INFO | That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 1b3b090275f2d9a38a223b21490b468b in your message.)
2023-03-15 18:29:49,885 - ai - INFO | Trying 2...
2023-03-15 18:29:49,885 - ai - INFO | Asking AI...
2023-03-15 18:39:49,893 - ai - INFO | Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)
2023-03-15 18:40:19,894 - ai - INFO | Trying 3...
2023-03-15 18:40:19,894 - ai - INFO | Asking AI...
2023-03-15 18:50:25,575 - __main__ - INFO | Start application
2023-03-15 18:50:26,092 - telegram.ext._application - INFO | Application started
2023-03-15 18:50:26,416 - tg_bot.tg_main - INFO | answering question started
2023-03-15 18:50:26,577 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 18:50:26,663 - tg_bot.correction - INFO | For question 'the middle-aged pupil in each class in any random school' following corrections returned:
2023-03-15 18:50:26,663 - tg_bot.correction - INFO | ["the oldest pupil in each school", "names of menu items in school 12", "second names of 100 pupils from first classes"]
2023-03-15 18:50:26,663 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 18:50:26,664 - answering.answering - INFO | Prompt builded
2023-03-15 18:50:26,664 - answering.answering - INFO | Generation AI answers
2023-03-15 18:50:26,664 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 18:50:26,664 - ai - INFO | Trying 1...
2023-03-15 18:50:26,664 - ai - INFO | Asking AI...
2023-03-15 18:50:57,675 - openai - INFO | error_code=None error_message='That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 021705cbb4af48b7db41e58170ab64d1 in your message.)' error_param=None error_type=server_error message='OpenAI API error received' stream_error=False
2023-03-15 18:50:57,676 - ai - INFO | That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 021705cbb4af48b7db41e58170ab64d1 in your message.)
2023-03-15 18:50:57,676 - ai - INFO | Waiting timeout...
2023-03-15 18:51:27,678 - ai - INFO | Trying 2...
2023-03-15 18:51:27,678 - ai - INFO | Asking AI...
2023-03-15 18:51:57,997 - openai - INFO | error_code=None error_message='The server experienced an error while processing your request. Sorry about that! You can retry your request, or contact us through our help center at help.openai.com if the error persists.' error_param=None error_type=server_error message='OpenAI API error received' stream_error=False
2023-03-15 18:59:46,577 - __main__ - INFO | Start application
2023-03-15 18:59:47,104 - telegram.ext._application - INFO | Application started
2023-03-15 19:00:27,500 - tg_bot.tg_main - INFO | answering question started
2023-03-15 19:00:27,864 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 19:00:27,953 - tg_bot.correction - INFO | For question 'the middle-aged pupil in each class in any random school' following corrections returned:
2023-03-15 19:00:27,954 - tg_bot.correction - INFO | ["the oldest pupil in each school", "names of menu items in school 12", "second names of 100 pupils from first classes"]
2023-03-15 19:00:27,954 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 19:00:27,954 - answering.answering - INFO | Prompt builded
2023-03-15 19:00:27,954 - answering.answering - INFO | Generation AI answers
2023-03-15 19:00:27,954 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 19:00:27,954 - ai - INFO | Trying 1...
2023-03-15 19:00:27,954 - ai - INFO | Asking AI...
2023-03-15 19:00:58,977 - openai - INFO | error_code=None error_message='That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 1aa9f15ddfd8fc55150de5613fa3ef43 in your message.)' error_param=None error_type=server_error message='OpenAI API error received' stream_error=False
2023-03-15 19:00:58,977 - ai - INFO | That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 1aa9f15ddfd8fc55150de5613fa3ef43 in your message.)
2023-03-15 19:00:58,977 - ai - INFO | Waiting timeout...
2023-03-15 19:01:28,977 - ai - INFO | Trying 2...
2023-03-15 19:01:28,977 - ai - INFO | Asking AI...
2023-03-15 19:03:13,021 - ai - INFO | AI code-davinci-002/93323ms. Tokens: 6393prompt, 152completion. Answers-metadata: [None]
2023-03-15 19:03:13,021 - ai - INFO | There are 0 correct answers
2023-03-15 19:03:13,021 - ai - INFO | AI answer was long or infinite. Try to increase 'max_tokens' or change the prompt.
2023-03-15 19:03:13,021 - ai - INFO | Waiting timeout...
2023-03-15 19:03:43,023 - ai - INFO | Trying 3...
2023-03-15 19:03:43,023 - ai - INFO | Asking AI...
2023-03-15 19:05:11,219 - ai - INFO | AI code-davinci-002/50803ms. Tokens: 6393prompt, 152completion. Answers-metadata: [None]
2023-03-15 19:05:11,219 - ai - INFO | There are 0 correct answers
2023-03-15 19:05:11,219 - ai - INFO | AI answer was long or infinite. Try to increase 'max_tokens' or change the prompt.
2023-03-15 19:05:11,219 - ai - INFO | Waiting timeout...
2023-03-15 19:05:41,220 - ai - INFO | Trying 4...
2023-03-15 19:05:41,220 - ai - INFO | Asking AI...
2023-03-15 19:07:42,762 - ai - INFO | AI code-davinci-002/79115ms. Tokens: 6393prompt, 152completion. Answers-metadata: [None]
2023-03-15 19:07:42,762 - ai - INFO | There are 0 correct answers
2023-03-15 19:07:42,762 - ai - INFO | AI answer was long or infinite. Try to increase 'max_tokens' or change the prompt.
2023-03-15 19:07:42,762 - ai - INFO | Waiting timeout...
2023-03-15 19:08:12,763 - ai - INFO | Trying 5...
2023-03-15 19:08:12,763 - ai - INFO | Asking AI...
2023-03-15 19:09:38,764 - ai - INFO | AI code-davinci-002/35279ms. Tokens: 6393prompt, 152completion. Answers-metadata: [None]
2023-03-15 19:09:38,764 - ai - INFO | There are 0 correct answers
2023-03-15 19:09:38,764 - ai - INFO | AI answer was long or infinite. Try to increase 'max_tokens' or change the prompt.
2023-03-15 19:09:38,765 - tg_bot.tg_main - WARNING | Cannot get an answer: 5 retries with 30s sleep between. Try again later.
Traceback (most recent call last):
  File "C:\Users\Maxim\Documents\Coding\DataMonsterAI\tg_bot\tg_main.py", line 37, in answer_question
    answer = answering.answer(question)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Maxim\Documents\Coding\DataMonsterAI\answering\answering.py", line 22, in answer
    ai_db_requests = ai.generate_answer_code(prompt)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Maxim\Documents\Coding\DataMonsterAI\ai.py", line 87, in generate_answer_code
    ai_responses = get_ai_responses_with_retries(prompt, LimitRetries, RetriesTimeoutSeconds)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Maxim\Documents\Coding\DataMonsterAI\ai.py", line 82, in get_ai_responses_with_retries
    raise TryAiLaterException(f"Cannot get an answer: {retries_limit} retries with {retries_timeout_seconds}s sleep between. Try again later.")
ai.TryAiLaterException: Cannot get an answer: 5 retries with 30s sleep between. Try again later.
2023-03-15 19:09:38,767 - tg_bot.tg_main - WARNING | error due building answer: Cannot get an answer: 5 retries with 30s sleep between. Try again later.
2023-03-15 19:12:33,182 - __main__ - INFO | Start application
2023-03-15 19:12:33,656 - telegram.ext._application - INFO | Application started
2023-03-15 19:14:02,833 - __main__ - INFO | Start application
2023-03-15 19:14:03,310 - telegram.ext._application - INFO | Application started
2023-03-15 19:14:06,024 - tg_bot.tg_main - INFO | answering question started
2023-03-15 19:14:06,159 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 19:14:06,260 - tg_bot.correction - INFO | For question 'the middle-aged pupil in each class in any random school' following corrections returned:
2023-03-15 19:14:06,260 - tg_bot.correction - INFO | ["the oldest pupil in each school", "names of menu items in school 12", "second names of 100 pupils from first classes"]
2023-03-15 19:14:06,260 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 19:14:06,260 - answering.answering - INFO | Prompt builded
2023-03-15 19:14:06,260 - answering.answering - INFO | Generation AI answers
2023-03-15 19:14:06,260 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 19:14:06,260 - ai - INFO | Trying 1...
2023-03-15 19:14:06,260 - ai - INFO | Asking AI...
2023-03-15 19:17:15,465 - ai - INFO | AI code-davinci-002/78491ms. Tokens: 6393prompt, 152completion. Answers-metadata: [None]
2023-03-15 19:17:15,466 - ai - INFO | [" *\nFROM\n (SELECT\n  schools.short_name,\n  CONCAT(base_users.first_name, ' ', base_users.last_name),\n  base_users.date_birth,\n  rank() OVER (PARTITION BY pupil_classes.id ORDER BY base_users.date_birth) as rank\n FROM pupils\n INNER JOIN pupil_classes ON pupils.pupil_class_id = pupil_classes.id\n INNER JOIN base_users ON pupils.base_user_id = base_users.id\n INNER JOIN schools ON pupil_classes.school_id = schools.id\n ) as ss\nWHERE rank = 2\n\n"]
2023-03-15 19:17:15,466 - ai - INFO | There are 0 correct answers
2023-03-15 19:17:15,466 - ai - INFO | AI answer was long or infinite. Try to increase 'max_tokens' or change the prompt.
2023-03-15 19:17:15,466 - ai - INFO | Waiting timeout...
2023-03-15 19:17:45,467 - ai - INFO | Trying 2...
2023-03-15 19:17:45,467 - ai - INFO | Asking AI...
2023-03-15 19:19:08,513 - ai - INFO | AI code-davinci-002/82757ms. Tokens: 6393prompt, 152completion. Answers-metadata: [stop]
2023-03-15 19:19:08,513 - ai - INFO | [" *\nFROM\n (SELECT\n  schools.short_name,\n  CONCAT(base_users.first_name, ' ', base_users.last_name),\n  base_users.date_birth,\n  rank() OVER (PARTITION BY pupil_classes.id ORDER BY base_users.date_birth) as rank\n FROM pupils\n INNER JOIN pupil_classes ON pupils.pupil_class_id = pupil_classes.id\n INNER JOIN base_users ON pupils.base_user_id = base_users.id\n INNER JOIN schools ON pupil_classes.school_id = schools.id\n ) as ss\nWHERE rank = 2\n\n"]
2023-03-15 19:19:08,513 - ai - INFO | There are 1 correct answers
2023-03-15 19:19:08,514 - answering.answering - INFO | 1 AI answers generated
2023-03-15 19:19:08,533 - answering.answering - INFO | Answer generated
2023-03-15 19:19:08,539 - answering.answering - INFO | {"answer_result": {"short_name": {"0": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "1": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "2": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "3": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "4": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "5": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "6": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "7": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "8": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "9": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "10": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "11": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "12": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "13": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "14": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "15": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "16": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "17": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "18": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "19": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "20": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "21": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "22": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "23": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "24": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "25": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "26": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "27": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "28": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "29": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "30": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "31": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "32": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "33": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "34": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "35": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "36": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "37": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "38": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "39": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "40": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "41": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "42": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "43": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "44": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "45": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "46": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "47": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "48": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "49": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "50": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "51": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "52": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "53": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "54": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "55": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "56": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "57": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "58": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "59": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "60": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "61": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "62": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "63": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "64": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "65": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "66": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "67": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "68": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "69": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "70": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "71": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "72": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "73": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "74": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "75": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "76": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "77": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "78": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "79": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "80": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "81": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "82": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "83": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "84": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "85": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "86": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "87": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "88": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "89": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "90": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "91": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "92": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "93": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "94": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "95": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "96": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "97": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "98": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "99": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "100": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "101": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "102": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "103": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "104": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "105": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "106": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "107": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "108": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "109": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "110": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "111": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "112": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "113": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "114": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "115": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "116": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "117": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "118": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "119": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "120": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "121": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "122": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "123": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "124": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "125": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "126": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "127": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "128": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "129": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "130": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "131": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "132": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "133": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "134": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "135": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "136": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "137": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "138": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "139": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "140": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "141": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "142": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "143": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "144": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "145": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "146": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "147": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "148": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "149": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "150": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "151": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "152": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "153": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "154": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "155": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "156": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "157": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "158": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "159": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "160": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "161": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "162": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "163": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "164": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "165": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "166": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "167": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "168": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "169": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "170": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "171": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "172": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "173": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "174": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "175": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "176": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "177": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "178": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "179": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "180": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "181": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "182": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "183": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "184": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "185": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "186": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "187": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "188": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "189": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "190": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "191": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "192": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "193": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "194": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "195": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "196": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "197": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "198": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "199": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "200": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "201": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "202": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "203": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "204": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "205": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "206": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "207": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "208": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "209": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "210": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "211": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "212": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "213": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "214": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "215": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "216": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "217": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "218": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "219": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "220": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "221": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "222": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "223": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "224": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "225": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "226": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "227": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "228": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "229": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "230": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "231": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "232": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "233": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "234": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "235": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "236": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "237": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "238": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 3", "239": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "240": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "241": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "242": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "243": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "244": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "245": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "246": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "247": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "248": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "249": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 31", "250": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "251": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "252": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "253": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "254": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "255": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "256": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 91 \u0433.\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a", "257": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "258": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "259": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "260": "\u041c\u0410\u041e\u0423 \u041b\u0438\u0446\u0435\u0439 \u2116 12", "261": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "262": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 53", "263": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "264": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16", "265": "\u041c\u0411\u041e\u0423 \u0421\u0428 \u2116 13", "266": "\u041c\u0410\u041e\u0423 \u0421\u0428 \u2116 16"}, "concat": {"0": "\u0411\u043e\u0433\u0434\u0430\u043d \u041a\u043e\u043d\u044e\u0448\u043a\u0438\u043d", "1": "\u0410\u043d\u0433\u0435\u043b\u0438\u043d\u0430 \u0413\u0443\u0441\u0435\u0439\u043d\u043e\u0432\u0430", "2": "\u041c\u0438\u0440\u0440\u0430 \u041a\u043e\u0447\u0435\u0442\u043a\u043e\u0432\u0430", "3": "\u042b\u043a\u044b\u0431\u0430\u043b \u0414\u044b\u0439\u043a\u0430\u043d\u0431\u0430\u0435\u0432\u0430", "4": "\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430 \u0413\u043e\u0440\u043e\u0445\u043e\u0432\u0430", "5": "\u0414\u0430\u0440\u044c\u044f \u0411\u043b\u044e\u043c", "6": "\u0421\u0443\u043c\u0430\u044f \u0420\u043e\u0438\u0431\u043e\u0432\u0430", "7": "\u041d\u0443\u0440\u0442\u0438\u043b\u0435\u043a \u0423\u0441\u0435\u043d\u043e\u0432", "8": "\u0410\u043b\u0451\u043d\u0430 \u0410\u0431\u0438\u0448\u0435\u0432\u0430", "9": "\u0410\u0431\u0443\u0431\u0430\u043a\u0440 \u0410\u0445\u044c\u0451\u0435\u0432", "10": "\u0422\u0430\u0442\u044c\u044f\u043d\u0430 \u041a\u0443\u0437\u0430\u043a\u043e\u0432\u0430", "11": "\u0421\u043e\u0444\u044c\u044f \u042f\u043a\u043e\u0432\u0435\u043d\u043a\u043e", "12": "\u0411\u0430\u0439\u044d\u043b \u0411\u043e\u043b\u0443\u0448\u043e\u0432", "13": "\u0414\u0435\u043d\u0438\u0441 \u041a\u0443\u0431\u043b\u0438\u043d\u0441\u043a\u0438\u0439", "14": "\u0415\u043b\u0438\u0437\u0430\u0432\u0435\u0442\u0430 \u0416\u0434\u0430\u043d\u044e\u043a", "15": "\u0410\u0434\u0435\u043b\u0438\u043d\u0430 \u042d\u0440\u043c\u0430\u0442\u043e\u0432\u0430", "16": "\u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0426\u043e\u043a\u0438\u043d", "17": "\u0411\u043e\u0433\u0434\u0430\u043d \u0420\u0435\u043f\u0438\u043d", "18": "\u041b\u0438\u0430\u043d\u0430 \u0420\u0430\u0433\u0443\u043b\u0435\u0432\u0430", "19": "\u0421\u0430\u0430\u043c\u0430\u0439\u0433\u0443\u043b \u041e\u043b\u0436\u043e\u0431\u0430\u0435\u0432\u0430", "20": "\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u0410\u043d\u0443\u0444\u0440\u0438\u0435\u043d\u043a\u043e", "21": "\u041c\u0438\u043b\u0430\u043d\u0430 \u0411\u0430\u0440\u0430\u043d\u043e\u0432\u0430", "22": "\u041b\u0430\u0434\u0430 \u0411\u043e\u0433\u0434\u0430\u043d\u043a\u0435\u0432\u0438\u0447", "23": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u041e\u0432\u0441\u0438\u0435\u043d\u043a\u043e", "24": "\u0410\u043b\u0438\u0431\u0435\u043a \u0422\u0443\u0440\u0433\u0443\u043c\u0431\u0435\u043a\u043e\u0432", "25": "\u0410\u0440\u0433\u0435\u043d \u0410\u0431\u0434\u044b\u0440\u0430\u043a\u043c\u0430\u043d\u043e\u0432", "26": "\u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u0415\u043b\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0432", "27": "\u0414\u0430\u0440\u044c\u044f \u0420\u0438\u0442\u0442\u0435\u0440", "28": "\u0414\u0430\u043d\u0438\u043b \u041b\u0435\u043c\u0435\u0448\u0435\u0432", "29": "\u041d\u0430\u0441\u0438\u0440\u0438\u043b\u043b\u043e \u0422\u043e\u0440\u043e\u0448\u0435\u0432", "30": "\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438\u043d \u041c\u043e\u0442\u043e\u0440\u043e\u0432", "31": "\u0410\u0434\u0438\u043b\u0435\u0442 \u041a\u043e\u0436\u043e\u043c\u0431\u0435\u0440\u0434\u0438\u0435\u0432", "32": "\u0422\u0438\u043c\u043e\u0444\u0435\u0439 \u0414\u044f\u0442\u043b\u043e\u0432", "33": "\u0415\u043b\u0438\u0437\u0430\u0432\u0435\u0442\u0430 \u041f\u043e\u043f\u043e\u0432\u0430", "34": "\u041c\u0430\u043a\u0441\u0438\u043c \u0411\u044b\u0447\u043a\u043e\u0432", "35": "\u041a\u0441\u0435\u043d\u0438\u044f \u0428\u0435\u0444\u0435\u0440", "36": "\u0412\u0430\u043b\u0435\u0440\u0438\u044f \u0424\u0435\u0434\u043e\u0440\u043e\u0432\u0430", "37": "\u041d\u0438\u043a\u0438\u0442\u0430 \u0413\u0440\u0430\u0447", "38": "\u0411\u0438\u043b\u043e\u043b\u0438\u0434\u0438\u043d \u0425\u0430\u0438\u0442\u0431\u0430\u0435\u0432", "39": "\u0415\u043b\u0435\u043d\u0430 \u0415\u043c\u0435\u043b\u044c\u044f\u043d\u0435\u043d\u043a\u043e\u0432\u0430", "40": "\u0410\u0441\u0435\u043c\u0430 \u041c\u044b\u043a\u0442\u0430\u0440\u0431\u0435\u043a\u043e\u0432\u0430", "41": "\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u0422\u0430\u0440\u0430\u0441\u043e\u0432", "42": "\u0420\u043e\u043c\u0430\u043d \u042e\u043c\u0430\u0442\u043e\u0432", "43": "\u0410\u043d\u0433\u0435\u043b\u0438\u043d\u0430 \u0421\u043e\u043a\u043e\u043b\u043e\u0432\u0441\u043a\u0430\u044f", "44": "\u0428\u0430\u0432\u043a\u0430\u0442 \u0425\u0430\u043c\u0434\u0430\u043d\u043e\u0432", "45": "\u0410\u043d\u0442\u043e\u043d \u0421\u0430\u0433\u0430\u043b\u0430\u043a\u043e\u0432", "46": "\u0410\u043b\u0451\u043d\u0430 \u041f\u0435\u0440\u0435\u043a\u0430\u0442\u0438\u0435\u0432\u0430", "47": "\u0421\u0435\u043c\u0451\u043d \u0411\u0430\u043b\u0430\u0448\u043e\u0432", "48": "\u041c\u0435\u0434\u0438\u043d\u0430 \u0414\u0443\u0439\u0448\u0435\u0435\u0432\u0430", "49": "\u041c\u0438\u043b\u0430\u043d\u0430 \u041f\u0435\u0442\u0440\u043e\u0432\u0430", "50": "\u0414\u0438\u043b\u043d\u043e\u0437\u0430 \u0420\u0430\u0445\u043c\u0430\u043d\u043e\u0432\u0430", "51": "\u041c\u0430\u043a\u0441\u0438\u043c \u0413\u043b\u0430\u0437\u0443\u043d\u043e\u0432", "52": "\u0410\u043b\u0438\u043d\u0430 \u0422\u0435\u0440\u0435\u043d\u0442\u044c\u0435\u0432\u0430", "53": "\u0412\u0430\u043b\u0435\u043d\u0442\u0438\u043d\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0430", "54": "\u0410\u0437\u0438\u0437\u0430 \u0423\u043c\u0430\u0440\u043e\u0432\u0430", "55": "\u0428\u0443\u043a\u0440\u043e\u043d\u0430 \u0421\u0430\u0439\u043c\u0438\u0440\u0437\u043e\u0435\u0432\u0430", "56": "\u0421\u0435\u0440\u0433\u0435\u0439 \u041c\u044f\u043a\u0438\u0448\u0435\u0432", "57": "\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430 \u041a\u0443\u0437\u044c\u043c\u0438\u043d\u0430", "58": "\u0421\u0435\u0440\u0433\u0435\u0439 \u0410\u0431\u0440\u043e\u0441\u0438\u043c\u043e\u0432", "59": "\u041e\u043b\u044c\u0433\u0430 \u0421\u0442\u0440\u0438\u0436\u043d\u0435\u0432\u0430", "60": "\u0421\u0430\u0431\u0440\u0438\u043d\u0430 \u0413\u0443\u043b\u0438\u0435\u0432\u0430", "61": "\u0411\u043e\u0433\u0434\u0430\u043d \u041d\u0435\u043f\u043e\u043c\u043d\u044f\u0449\u0438\u0439", "62": "\u0410\u0445\u043c\u0430\u0434\u0436\u043e\u043d \u041d\u0430\u0437\u0430\u0440\u043e\u0432", "63": "\u0414\u0430\u0440\u044c\u044f \u0412\u043e\u0440\u043e\u043d\u043e\u0432\u0430", "64": "\u041f\u0430\u0432\u0435\u043b \u041a\u0443\u0440\u0433\u0430\u043d\u043a\u0438\u043d", "65": "\u041c\u0430\u0440\u0438\u043d\u0430 \u041c\u0430\u0448\u043a\u043e", "66": "\u0410\u0440\u0438\u043d\u0430 \u0422\u044b\u0449\u0435\u043d\u043a\u043e", "67": "\u0425\u0430\u0434\u0438\u044f\u0442\u0443\u043b\u043e \u0421\u0430\u0439\u0434\u0436\u0430\u0445\u0444\u0430\u0440\u043e\u0432", "68": "\u0421\u0435\u0440\u0433\u0435\u0439 \u041a\u043e\u0441\u0442\u044b\u0440\u043a\u043e", "69": "\u041c\u0430\u0440\u0438\u044f\u043c \u0414\u0443\u0441\u0442\u043e\u0432\u0430", "70": "\u0410\u0440\u0438\u0435\u0442 \u041a\u043e\u0436\u043e\u043c\u0431\u0435\u0440\u0434\u0438\u0435\u0432", "71": "\u042e\u043b\u0438\u044f \u0420\u043e\u0441\u0441\u0430\u0434\u044e\u043a", "72": "\u0421\u0430\u0440\u0432\u0430\u0440 \u0414\u0436\u0430\u043d\u0437\u0430\u043a\u043e\u0432", "73": "\u0421\u0435\u043c\u0451\u043d \u041f\u0438\u0441\u0430\u0440\u0435\u0432", "74": "\u0410\u043c\u0438\u0440\u0430 \u0411\u0430\u0442\u044b\u0440\u0448\u0438\u043d\u0430", "75": "\u041c\u0430\u0445\u0438\u043d\u043e\u0437 \u0420\u0443\u0441\u0442\u0430\u043c\u043e\u0432\u0430", "76": "\u0421\u0435\u0440\u0433\u0435\u0439 \u0412\u043e\u0440\u043e\u0448\u0438\u043b\u043e\u0432", "77": "\u0412\u0438\u043a\u0442\u043e\u0440\u0438\u044f \u0412\u043e\u0440\u043e\u0448\u0438\u043b\u043e\u0432\u0430", "78": "\u041c\u0430\u0440\u043a \u0412\u0430\u0433\u0430\u043d\u043e\u0432", "79": "\u0416\u0430\u043d\u044b\u043b\u0430\u0439 \u0422\u043e\u0439\u0447\u0443\u0431\u0435\u043a\u043e\u0432\u0430", "80": "\u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0415\u043c\u0435\u043b\u044c\u044f\u043d\u0435\u043d\u043a\u043e", "81": "\u0412\u044f\u0447\u0435\u0441\u043b\u0430\u0432 \u0417\u0435\u043d\u044c\u043a\u043e\u0432", "82": "\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438\u043d \u0414\u043e\u0433\u043e\u0434\u0430\u0435\u0432", "83": "\u0417\u0430\u0440\u0438\u043d\u0430 \u0421\u0430\u0431\u0430\u0445\u043e\u043d\u043e\u0432\u0430", "84": "\u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u041c\u0438\u043b\u0435\u0445\u0438\u043d", "85": "\u041d\u0438\u043a\u0438\u0442\u0430 \u0410\u043d\u0438\u043a\u0438\u043d", "86": "\u041d\u0430\u0440\u0433\u0438\u0441 \u0410\u043a\u0440\u0430\u043c\u043e\u0432\u0430", "87": "\u0421\u043e\u0444\u0438\u044f \u0411\u0430\u0440\u0431\u043e\u0437\u043e\u0432\u0430", "88": "\u0414\u0430\u0440\u044c\u044f \u0422\u0430\u0440\u0430\u0441\u043e\u0432\u0430", "89": "\u041c\u0430\u0445\u0430\u043c\u043c\u0435\u0434 \u0410\u0437\u0438\u0437\u043e\u0432", "90": "\u041c\u0430\u043d\u0438\u0436\u0430 \u0428\u043e\u043c\u0438\u0440\u0437\u043e\u0435\u0432\u0430", "91": "\u0410\u043b\u0438 \u0420\u0430\u0445\u0438\u043c\u043e\u0432", "92": "\u0412\u0438\u043a\u0442\u043e\u0440 \u041a\u043e\u0440\u0430\u0431\u043b\u0451\u0432", "93": "\u041c\u0430\u043a\u0441\u0438\u043c \u041f\u0435\u0440\u0448\u0438\u043d\u043e\u0432", "94": "\u041e\u043c\u0430\u0434 \u0421\u0430\u0431\u0438\u0440\u043e\u0432", "95": "\u041c\u0430\u0442\u0432\u0435\u0439 \u0418\u0432\u0430\u043d\u043e\u0432", "96": "\u041c\u0430\u043b\u0438\u043a\u0430 \u0422\u0430\u0433\u043e\u0435\u0432\u0430", "97": "\u042d\u0441\u0444\u0438\u0440\u044c \u0414\u0443\u043b\u0438\u043d\u0435\u0446", "98": "\u041e\u0439\u0441\u0430\u0431\u043e\u043d\u0443 \u0418\u0441\u043c\u0430\u0442\u043e\u0432\u0430", "99": "\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u041c\u0438\u0445\u0435\u0442\u043e\u0432", "100": "\u0413\u043b\u0435\u0431 \u0421\u0435\u043c\u0451\u043d\u043e\u0432", "101": "\u042d\u0434\u0438\u043b\u0431\u0435\u043a \u041a\u0430\u0434\u0438\u0440\u043a\u0443\u043b\u043e\u0432", "102": "\u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u044f \u0421\u0430\u0437\u043e\u043d\u043e\u0432\u0430", "103": "\u0415\u0432\u0433\u0435\u043d\u0438\u0439 \u041a\u043e\u0442\u0435\u0440\u043e\u0432", "104": "\u0414\u0430\u043d\u0438\u0438\u043b \u041c\u0435\u0434\u0432\u0435\u0434\u0435\u0432", "105": "\u041d\u0443\u0440\u0431\u0435\u043a \u0411\u0430\u0439\u043c\u0438\u0440\u0437\u0430\u0435\u0432", "106": "\u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0430 \u0410\u0444\u0430\u043d\u0430\u0441\u0435\u043d\u043a\u043e", "107": "\u0420\u0430\u0441\u0438\u043c \u0413\u0443\u0440\u0431\u0430\u043d\u043e\u0432", "108": "\u041c\u0430\u043d\u0438\u0436\u0430 \u0425\u043e\u043c\u0438\u0434\u043e\u0432\u0430", "109": "\u0414\u0435\u043c\u0438\u0434 \u0413\u0430\u0432\u0440\u0438\u043b\u043e\u0432", "110": "\u0410\u043d\u043d\u0430 \u0420\u0438\u0442\u0442\u0435\u0440", "111": "\u041c\u0430\u043a\u0441\u0438\u043c \u0421\u0438\u043b\u0430\u043d\u0442\u044c\u0435\u0432", "112": "\u0423\u043b\u044c\u044f\u043d\u0430 \u0418\u0433\u043d\u0430\u0442\u044c\u0435\u0432\u0430", "113": "\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430 \u041a\u043e\u0436\u0435\u043c\u044f\u043a\u0438\u043d\u0430", "114": "\u0421\u0432\u044f\u0442\u043e\u0441\u043b\u0430\u0432 \u0420\u044f\u0431\u043e\u0432-\u041d\u0430\u0439\u0434\u0430\u043d", "115": "\u0424\u0430\u0445\u0440\u0438\u0434\u0434\u0438\u043d \u0421\u0430\u0439\u043c\u0430\u0445\u043c\u0430\u0434\u043e\u0432", "116": "\u0420\u043e\u0445\u0438\u043b\u0430 \u042d\u0448\u043e\u043d\u043e\u0432\u0430", "117": "\u0412\u0430\u0434\u0438\u043c \u0422\u0438\u0442\u0435\u043d\u043a\u043e\u0432", "118": "\u0410\u0440\u0442\u0451\u043c \u0416\u0430\u0440\u0438\u043a\u043e\u0432", "119": "\u041a\u0441\u0435\u043d\u0438\u044f \u0416\u0438\u0434\u043a\u043e\u0432\u0430", "120": "\u0423\u043b\u044c\u044f\u043d\u0430 \u041a\u043e\u043a\u043e\u0440\u0438\u043d\u0430", "121": "\u041c\u0443\u0445\u0438\u0431\u0443\u043b\u043b\u043e \u0410\u0431\u0434\u0443\u0430\u043b\u0438\u0435\u0432", "122": "\u041f\u0430\u0432\u0435\u043b \u041a\u043e\u0440\u043e\u043b\u0435\u0432", "123": "\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u041d\u0435\u043a\u0440\u0443\u0442\u0435\u043d\u043a\u043e", "124": "\u0412\u0438\u0442\u0430\u043b\u0438\u0439 \u0415\u0440\u043c\u0438\u0448\u0438\u043d", "125": "\u0412\u0438\u043a\u0442\u043e\u0440 \u041a\u0440\u043e\u043f\u0430\u0447\u0435\u0432", "126": "\u0410\u0441\u0435\u043b \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430", "127": "\u0415\u0432\u0430 \u041a\u043e\u0441\u0442\u044e\u043a\u043e\u0432\u0430", "128": "\u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u044f \u0411\u043e\u043b\u043e\u0442\u043e\u0432\u0430", "129": "\u0412\u0430\u043b\u0435\u0440\u0438\u044f \u0412\u043e\u0440\u043e\u043d\u0438\u043d\u0430", "130": "\u0412\u0430\u043b\u0435\u0440\u0438\u044f \u042f\u0442\u0438\u043d\u0430", "131": "\u0420\u0430\u043c\u0437\u0438\u044f \u0421\u0443\u043b\u0430\u0439\u043c\u043e\u043d\u043e\u0432\u0430", "132": "\u042d\u043c\u0438\u0440 \u0418\u0441\u043c\u0430\u0438\u043b\u043e\u0432", "133": "\u0414\u0438\u0451\u0440\u0430 \u0418\u043d\u0430\u043c\u043e\u0432\u0430", "134": "\u042d\u043b\u0438\u0437\u0430 \u0418\u0441\u043c\u043e\u043d\u043e\u0432\u0430", "135": "\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u0421\u0442\u0440\u0443\u0436\u043a\u043e\u0432", "136": "\u041c\u0430\u043a\u0441\u0438\u043c \u0415\u0449\u0435\u043d\u043a\u043e", "137": "\u0421\u0430\u0432\u0435\u043b\u0438\u0439 \u041a\u0430\u0439\u0441\u0438\u043d", "138": "\u042f\u0440\u043e\u0441\u043b\u0430\u0432 \u0411\u0435\u0440\u0431\u0435\u0440", "139": "\u0414\u0430\u0440\u044c\u044f \u041a\u043e\u043b\u0443\u043f\u0430\u0435\u0432\u0430", "140": "\u0410\u043d\u043d\u0430 \u041e\u0441\u0438\u043f\u043e\u0432\u0430", "141": "\u041c\u0430\u0445\u043c\u0430\u0434\u043b\u043e \u0414\u0430\u0432\u043b\u0430\u0442\u043e\u0432", "142": "\u0414\u0435\u043c\u044c\u044f\u043d \u041c\u0430\u0442\u0430\u043d\u0438\u0441", "143": "\u0421\u0435\u0432\u0430\u0440\u0430 \u0422\u0443\u0440\u0433\u0443\u043d\u0431\u043e\u0435\u0432\u0430", "144": "\u041c\u0430\u043a\u0441\u0438\u043c \u041a\u043e\u043d\u043e\u043d\u0435\u043d\u043a\u043e", "145": "\u041c\u0430\u043a\u0441\u0438\u043c \u0411\u0443\u043b\u044b\u0433\u0430", "146": "\u0410\u043b\u0438\u043d\u0430 \u0422\u0435\u0442\u0435\u0440\u043a\u0438\u043d\u0430", "147": "\u0412\u0435\u0440\u0430 \u041a\u0443\u0437\u043d\u0435\u0446\u043e\u0432\u0430", "148": "\u0410\u043b\u0438\u0448\u0435\u0440 \u042e\u043b\u0434\u0430\u0448\u0431\u0430\u0435\u0432", "149": "\u041c\u0430\u043a\u0441\u0438\u043c \u0421\u0438\u043c\u0430\u043a\u043e\u0432", "150": "\u041d\u0430\u0436\u0438\u0431\u0443\u043b\u043b\u043e \u0410\u0431\u0434\u0443\u0430\u043b\u0438\u0435\u0432", "151": "\u0410\u043d\u0434\u0440\u0435\u0439 \u0424\u0435\u0434\u043e\u0441\u0435\u0435\u0432", "152": "\u041c\u0430\u0440\u043a \u042f\u043a\u043e\u0432\u043b\u0435\u0432", "153": "\u0418\u043b\u044c\u044f \u0413\u0440\u0435\u0431\u0430\u043b\u043a\u043e", "154": "\u0410\u0440\u0438\u0435\u0442 \u0421\u0430\u0440\u044b\u043a\u043e\u0432", "155": "\u041c\u0443\u0445\u0430\u043c\u0430\u0434\u0430\u043c\u0438\u043d \u0411\u0430\u0431\u0430\u043d\u0430\u0437\u0430\u0440\u043e\u0432", "156": "\u0414\u0430\u043d\u0438\u043b \u0411\u043e\u0440\u0438\u0441\u043e\u0432", "157": "\u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432\u0430 \u0417\u044b\u0440\u044f\u043d\u043e\u0432\u0430", "158": "\u0411\u043e\u0433\u0434\u0430\u043d \u041b\u0430\u0432\u0440\u0435\u043d\u0442\u044c\u0435\u0432", "159": "\u0410\u043d\u043d\u0430 \u0411\u0443\u0442\u0435\u043d\u043a\u043e", "160": "\u041c\u0430\u0440\u0433\u0430\u0440\u0438\u0442\u0430 \u041c\u0435\u0441\u043d\u044f\u043d\u043a\u0438\u043d\u0430", "161": "\u0412\u0430\u043b\u0435\u0440\u0438\u044f \u0414\u0435\u043b\u0438\u0433\u043e\u0434\u0438\u043d\u0430", "162": "\u0412\u0430\u043b\u0435\u0440\u0438\u044f \u0427\u0435\u0440\u0432\u044f\u043a\u043e\u0432\u0430", "163": "\u0410\u043b\u044c\u0431\u0438\u043d\u0430 \u0418\u0441\u043a\u0435\u043d\u0434\u0435\u0440\u043e\u0432\u0430", "164": "\u0414\u0435\u043d\u0438\u0441 \u0424\u0438\u0440\u0441\u043e\u0432", "165": "\u0420\u043e\u043c\u0430\u043d \u0428\u0438\u043b\u044f\u0435\u0432", "166": "\u0413\u0443\u0441\u0435\u0439\u043d \u0411\u0430\u0431\u0430\u0435\u0432", "167": "\u0421\u043e\u0444\u0438\u044f \u0428\u043c\u0430\u0442\u043e\u0432\u0430", "168": "\u0410\u0440\u0438\u043d\u0430 \u0421\u0443\u043c\u0438\u043d\u0430", "169": "\u0413\u0443\u043b\u044c\u0430\u0440\u0443\u0441 \u041c\u0430\u0437\u043e\u0440\u0438\u0435\u0432\u0430", "170": "\u0428\u0430\u043c\u0441 \u0421\u0430\u0438\u0434\u043e\u0432", "171": "\u041c\u0430\u0440\u044c\u044f\u043c \u0410\u0439\u0442\u043a\u0443\u043b\u043e\u0432\u0430", "172": "\u0410\u0440\u0442\u0451\u043c \u0420\u0435\u043c\u0438\u0437\u043e\u0432", "173": "\u0410\u0439\u0434\u0430\u0440 \u041a\u0430\u0440\u0438\u043c\u043e\u0432", "174": "\u041c\u0443\u0440\u0430\u0442 \u041a\u0435\u043d\u0435\u0431\u0430\u0435\u0432", "175": "\u0412\u0441\u0435\u0432\u043e\u043b\u043e\u0434 \u0410\u0441\u0442\u0430\u0444\u044c\u0435\u0432", "176": "\u0414\u0435\u043d\u0438\u0441 \u041a\u043e\u0437\u044b\u0440\u044c", "177": "\u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432 \u0415\u043c\u0435\u043b\u044c\u044f\u043d\u043e\u0432", "178": "\u0414\u0430\u0440\u044c\u044f \u0428\u0438\u0440\u043e\u0431\u043e\u043a\u043e\u0432\u0430", "179": "\u0414\u0430\u043d\u0438\u0438\u043b \u0427\u0435\u0431\u0430\u043d", "180": "\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u0422\u0438\u043c\u043e\u0444\u0435\u0435\u0432", "181": "\u0414\u0438\u043b\u043d\u043e\u0437\u0430 \u0411\u0430\u0440\u0433\u043e\u0432\u0430", "182": "\u0412\u0430\u0441\u0438\u043b\u0438\u0441\u0430 \u041c\u0438\u0440\u0433\u043e\u0440\u043e\u0434\u0441\u043a\u0430\u044f", "183": "\u041c\u0430\u0442\u0432\u0435\u0439 \u0422\u0438\u043c\u043e\u043d\u0438\u043d", "184": "\u0410\u0431\u0434\u0443\u0440\u0430\u0445\u043c\u0430\u043d \u041e\u044f\u0442\u0443\u043b\u043b\u043e\u0438", "185": "\u041e\u0439\u0438\u0448\u0430\u0445\u043e\u043d \u0411\u043e\u0431\u043e\u0434\u0436\u043e\u043d\u043e\u0432\u0430", "186": "\u042e\u0440\u0438\u0439 \u0421\u043e\u043b\u043e\u043c\u0430\u0442\u0438\u043d", "187": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0417\u043b\u043e\u0431\u0438\u043d", "188": "\u0425\u0443\u043c\u043e\u044e\u043d \u0411\u0435\u0433\u0430\u043b\u0438\u0435\u0432", "189": "\u0410\u043d\u0442\u043e\u043d \u041b\u0430\u0440\u044c\u043a\u043e\u0432", "190": "\u0410\u043b\u0438 \u0412\u0435\u043b\u0438\u0435\u0432", "191": "\u0410\u043d\u0444\u0438\u0441\u0430 \u041a\u043e\u043d\u043e\u0432\u0430\u043b\u043e\u0432\u0430", "192": "\u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u044f \u041c\u0430\u043a\u043e\u0441\u0438\u0439", "193": "\u041d\u0438\u043a\u0438\u0442\u0430 \u0410\u043a\u0438\u043c\u043e\u0432", "194": "\u0421\u0435\u0440\u0433\u0435\u0439 \u041f\u043b\u043e\u0442\u043d\u0438\u043a\u043e\u0432", "195": "\u042b\u0440\u044b\u0441\u043a\u0435\u043b\u0434\u0438 \u041b\u0443\u0442\u0431\u0438\u043b\u0430\u0435\u0432", "196": "\u0421\u0435\u0440\u0433\u0435\u0439 \u0412\u043e\u0441\u0442\u0440\u0438\u043a\u043e\u0432", "197": "\u0410\u043b\u0451\u043d\u0430 \u0418\u043b\u044c\u044f\u0448\u0435\u0432\u0438\u0447", "198": "\u0416\u0434\u0430\u043d\u0430 \u041a\u043e\u0442\u043e\u0432\u0430", "199": "\u0414\u0435\u043c\u044c\u044f\u043d \u041d\u0438\u043a\u0438\u0444\u043e\u0440\u043e\u0432", "200": "\u0410\u043d\u0434\u0440\u0435\u0439 \u0427\u0435\u043b\u0443\u0448\u043a\u0438\u043d", "201": "\u041e\u043e\u043c\u0430\u0442 \u041d\u044b\u0448\u0430\u043d\u043e\u0432", "202": "\u0418\u043b\u044c\u044f \u041f\u0440\u043e\u0441\u043a\u0443\u0440\u0434\u0438\u043d", "203": "\u0410\u0431\u0434\u0443\u043c\u0443\u043b\u0438\u0431 \u0422\u0443\u0440\u043a\u043c\u0435\u043d\u043e\u0432", "204": "\u0412\u0435\u0440\u043e\u043d\u0438\u043a\u0430 \u0421\u0443\u043b\u0442\u0430\u043d\u043e\u0432\u0430", "205": "\u041c\u0443\u0431\u043e\u0440\u0430\u043a\u0445\u043e\u043d \u0418\u0448\u0430\u043d\u043e\u0432\u0430", "206": "\u041a\u0440\u0438\u0441\u0442\u0438\u043d\u0430 \u0410\u0431\u0440\u0430\u0448\u0438\u0442\u043e\u0432\u0430", "207": "\u0418\u0441\u043c\u043e\u0438\u043b \u041c\u0430\u0445\u043c\u0430\u0434\u0438\u0435\u0432", "208": "\u0420\u0443\u0437\u0430\u0444\u0437\u0443\u043d \u041c\u0443\u0441\u043e\u0435\u0432\u0430", "209": "\u0423\u0440\u0430\u0437\u0431\u0430\u0439 \u0425\u0443\u0434\u0430\u0439\u0431\u0435\u0440\u0434\u0438\u0435\u0432", "210": "\u0421\u0443\u043c\u0430\u044f \u0428\u0430\u0440\u043e\u0444\u0443\u0434\u0434\u0438\u043d\u0437\u043e\u0434\u0430", "211": "\u0411\u0435\u0433\u0437\u0430\u0442 \u041c\u0443\u0445\u0442\u0430\u0440\u043e\u0432", "212": "\u0421\u0435\u0440\u0433\u0435\u0439 \u041c\u0430\u0440\u0447\u0435\u043d\u043a\u043e", "213": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u041d\u0430\u0443\u043c\u043e\u0432", "214": "\u0410\u043d\u0430\u0442\u043e\u043b\u0438\u0439 \u0413\u043b\u044b\u0437\u0438\u043d", "215": "\u0412\u043b\u0430\u0434\u0438\u0441\u043b\u0430\u0432 \u041f\u043e\u043f\u043e\u0432", "216": "\u041c\u0430\u0434\u0438\u043d\u0430\u0445\u043e\u043d \u0422\u0443\u0440\u0441\u0443\u043d\u043a\u0443\u043b\u043e\u0432\u0430", "217": "\u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440 \u042e\u0440\u0447\u0435\u043d\u043a\u043e", "218": "\u041e\u0439\u0436\u0430\u043c\u043e\u043b \u0418\u0441\u043c\u043e\u043d\u043e\u0432\u0430", "219": "\u0415\u0433\u043e\u0440 \u0417\u0443\u0431\u043a\u043e\u0432\u0441\u043a\u0438\u0439", "220": "\u0424\u0451\u0434\u043e\u0440 \u0413\u0440\u043e\u043c\u043e\u0432", "221": "\u0414\u0430\u043d\u0438\u0438\u043b \u041a\u0430\u0447\u0430\u043d\u043a\u0438\u043d", "222": "\u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u041f\u043b\u043e\u0442\u043d\u0438\u043a\u043e\u0432", "223": "\u0411\u0435\u043a\u0441\u0443\u043b\u0442\u0430\u043d \u041d\u0430\u0440\u0433\u0438\u0437\u0430", "224": "\u041f\u043e\u043b\u0438\u043d\u0430 \u0414\u0430\u043d\u0438\u043b\u043e\u0432\u0430", "225": "\u0415\u0433\u043e\u0440 \u0413\u043e\u043b\u043e\u0441\u043e\u0432", "226": "\u041a\u0430\u0440\u0438\u043d\u0430 \u0412\u043e\u0440\u043e\u0431\u044c\u0435\u0432\u0430", "227": "\u0415\u043b\u0438\u0437\u0430\u0432\u0435\u0442\u0430 \u0414\u043e\u043c\u043d\u0438\u043d\u0430", "228": "\u0411\u0435\u043a\u0437\u0430\u0442 \u0418\u0431\u0440\u0430\u0438\u043c\u043a\u0430\u043d\u043e\u0432", "229": "\u041f\u0430\u0440\u0432\u043e\u043d\u0430 \u0414\u0430\u0432\u0440\u043e\u043d\u043e\u0432\u0430", "230": "\u0421\u043e\u0444\u0438\u044f \u042e\u0448\u043a\u043e\u0432\u0430", "231": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u041f\u0430\u043d\u0442\u044e\u0448\u0435\u0432", "232": "\u0414\u0430\u043d\u0438\u0435\u043b\u044c \u0411\u0435\u0440\u043b\u043e\u0432", "233": "\u0414\u0430\u0440\u044c\u044f \u0421\u0443\u043d\u0430\u0433\u0430\u0442\u043e\u0432\u0430", "234": "\u041a\u0441\u0435\u043d\u0438\u044f \u0410\u0445\u043c\u0435\u0442\u043a\u0430\u043b\u0438\u0435\u0432\u0430", "235": "\u0420\u0443\u0441\u0442\u0430\u043c \u0422\u043e\u0448\u0431\u043e\u0431\u043e\u0435\u0432", "236": "\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430 \u0414\u0435\u0440\u0435\u0432\u044f\u043d\u043a\u0438\u043d\u0430", "237": "\u041c\u0430\u0442\u0432\u0435\u0439 \u0413\u043e\u043b\u043e\u0432\u0438\u043d", "238": "\u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u044f \u041b\u0438\u0445\u043e\u0434\u0435\u0435\u0432\u0430", "239": "\u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u044f \u0428\u043a\u0443\u043c\u0430\u0442", "240": "\u0412\u0438\u043a\u0442\u043e\u0440\u0438\u044f \u0428\u0438\u0440\u043e\u043a\u0430\u044f", "241": "\u0410\u0440\u0442\u0451\u043c \u0422\u044e\u0440\u0438\u043d", "242": "\u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440 \u0410\u043b\u0435\u043a\u0441\u0435\u0435\u0432", "243": "\u0410\u043b\u0438\u043d\u0430 \u0413\u0435\u043d\u0435\u0440\u0430\u043b\u043e\u0432\u0430", "244": "\u0424\u0430\u0440\u0440\u0443\u0445\u0431\u0435\u043a \u0422\u0443\u0440\u0434\u0430\u043b\u0438\u0435\u0432", "245": "\u0410\u043d\u043d\u0430 \u042f\u0441\u0435\u043d\u0438\u0446\u043a\u0430\u044f", "246": "\u041c\u0430\u043a\u0441\u0438\u043c\u0438\u043b\u044c\u044f\u043d \u041c\u0435\u0436\u0443\u0435\u0432", "247": "\u041d\u0435\u044a\u043c\u0430\u0442\u0443\u043b\u043b\u043e \u041d\u043e\u0437\u0438\u043b\u043e\u0432", "248": "\u042d\u043b\u044c\u0434\u0430\u0440 \u042e\u0441\u0443\u043f\u043e\u0432", "249": "\u0414\u0438\u043b\u0448\u043e\u0434 \u0412\u0430\u043b\u0438\u0435\u0432", "250": "\u0413\u0435\u043d\u043d\u0430\u0434\u0438\u0439 \u041f\u043b\u0435\u0448\u043a\u043e\u0432", "251": "\u0422\u0438\u043c\u043e\u0444\u0435\u0439 \u0422\u043a\u0430\u0447", "252": "\u041c\u0443\u0445\u0430\u043c\u043c\u0430\u0434\u0438\u0434\u0440\u0438\u0441 \u0410\u0448\u0443\u0440\u043e\u0432", "253": "\u0412\u0430\u043b\u0435\u0440\u0438\u044f \u0414\u043e\u0434\u0435\u0443\u0448\u0435\u0432\u0430", "254": "\u041a\u0441\u0435\u043d\u0438\u044f \u041a\u043e\u0432\u0430\u043b\u0435\u043d\u043a\u043e", "255": "\u0410\u043d\u0430\u0441\u0442\u0430\u0441\u0438\u044f \u0428\u0438\u0442\u0438\u043a\u043e\u0432\u0430", "256": "\u041c\u0430\u043a\u0430\u0440 \u0421\u0442\u043e\u0440\u043e\u0436\u0443\u043a", "257": "\u0410\u043d\u0442\u043e\u043d \u0415\u0440\u0435\u043c\u0435\u0435\u0432", "258": "\u0410\u043d\u043d\u0430 \u0415\u0440\u0435\u043c\u0435\u0435\u0432\u0430", "259": "\u0410\u043d\u043d\u0430 \u0411\u0443\u0437\u043c\u0430\u043a\u043e\u0432\u0430", "260": "\u0412\u0438\u043a\u0442\u043e\u0440\u0438\u044f \u0421\u043e\u043b\u0434\u0430\u0442\u0435\u043d\u043a\u043e", "261": "\u0412\u0438\u043a\u0442\u043e\u0440\u0438\u044f \u041f\u0448\u0435\u043d\u0438\u0447\u043d\u0438\u043a\u043e\u0432\u0430", "262": "\u0415\u0433\u043e\u0440 \u041a\u0430\u0440\u0430\u0441\u043f\u0430\u043d\u0430\u043a\u043e\u0432", "263": "\u0410\u0440\u0442\u044b\u0448\u043c\u0430\u0430 \u0414\u043e\u0433\u0431\u0430\u043b", "264": "\u041c\u0430\u043c\u043b\u0430\u043a\u0430\u0442 \u0425\u0430\u0444\u0438\u0437\u043e\u0432\u0430", "265": "\u0410\u0440\u0441\u0435\u043d\u0438\u0439 \u0411\u0430\u0431\u0430\u044f\u043d", "266": "\u041c\u0443\u0445\u0430\u043c\u0430\u0434\u0443\u043c\u0430\u0440 \u0410\u0448\u0443\u0440\u043e\u0432"}, "date_birth": {"0": 1200268800000, "1": 1229299200000, "2": 1135814400000, "3": 1216684800000, "4": 1357430400000, "5": 1413763200000, "6": 1367798400000, "7": 1349654400000, "8": 1271894400000, "9": 1173225600000, "10": 1198972800000, "11": 1380844800000, "12": 1298764800000, "13": 1262131200000, "14": 1201564800000, "15": 1349049600000, "16": 1256774400000, "17": 1283299200000, "18": 1416268800000, "19": 1337472000000, "20": 1273622400000, "21": 1390176000000, "22": 1413936000000, "23": 1381622400000, "24": 1285804800000, "25": 1334620800000, "26": 1231200000000, "27": 1382832000000, "28": 1421193600000, "29": 1400198400000, "30": 1189987200000, "31": 1207612800000, "32": 1413849600000, "33": 1159833600000, "34": 1262044800000, "35": 1106006400000, "36": 1289347200000, "37": 1131580800000, "38": 1357084800000, "39": 1165881600000, "40": 1199404800000, "41": 1116460800000, "42": 1303257600000, "43": 1290556800000, "44": 1199318400000, "45": 1107043200000, "46": 1107043200000, "47": 1260230400000, "48": 1235174400000, "49": 1289952000000, "50": 1182297600000, "51": 1154304000000, "52": 1131408000000, "53": 1218499200000, "54": 1223596800000, "55": 1362009600000, "56": 1235088000000, "57": 1384992000000, "58": 1323388800000, "59": 1296691200000, "60": 1384128000000, "61": 1286409600000, "62": 1358640000000, "63": 1135468800000, "64": 1229212800000, "65": 1108080000000, "66": 1131235200000, "67": 1216166400000, "68": 1163980800000, "69": 1417996800000, "70": 1255132800000, "71": 1195257600000, "72": 1406246400000, "73": 1227571200000, "74": 1410825600000, "75": 1286323200000, "76": 1259539200000, "77": 1259539200000, "78": 1325376000000, "79": 1348099200000, "80": 1354320000000, "81": 1132876800000, "82": 1292889600000, "83": 1416096000000, "84": 1319241600000, "85": 1199318400000, "86": 1272153600000, "87": 1292284800000, "88": 1320969600000, "89": 1251504000000, "90": 1411948800000, "91": 1191542400000, "92": 1262217600000, "93": 1381708800000, "94": 1343347200000, "95": 1291593600000, "96": 1166659200000, "97": 1320278400000, "98": 1183248000000, "99": 1164067200000, "100": 1160870400000, "101": 1252368000000, "102": 1348531200000, "103": 1201651200000, "104": 1231113600000, "105": 1097712000000, "106": 1163289600000, "107": 1353628800000, "108": 1150934400000, "109": 1355616000000, "110": 1259971200000, "111": 1228953600000, "112": 1117065600000, "113": 1321833600000, "114": 1327363200000, "115": 1288396800000, "116": 1235606400000, "117": 1169683200000, "118": 1372291200000, "119": 1419465600000, "120": 1353542400000, "121": 1244160000000, "122": 1412640000000, "123": 1394150400000, "124": 1355616000000, "125": 1139788800000, "126": 1160438400000, "127": 1321142400000, "128": 1226016000000, "129": 1382659200000, "130": 1289606400000, "131": 1300665600000, "132": 1383609600000, "133": 1308096000000, "134": 1132617600000, "135": 1417132800000, "136": 1229904000000, "137": 1229904000000, "138": 1167523200000, "139": 1411084800000, "140": 1258934400000, "141": 1169078400000, "142": 1249257600000, "143": 1381363200000, "144": 1415664000000, "145": 1232409600000, "146": 1170720000000, "147": 1359849600000, "148": 1395446400000, "149": 1316908800000, "150": 1296691200000, "151": 1293235200000, "152": 1382659200000, "153": 1133740800000, "154": 1351987200000, "155": 1392249600000, "156": 1160697600000, "157": 1225929600000, "158": 1136246400000, "159": 1262995200000, "160": 1384905600000, "161": 1257552000000, "162": 1329004800000, "163": 1380758400000, "164": 1224288000000, "165": 1103155200000, "166": 1249344000000, "167": 1321574400000, "168": 1232064000000, "169": 1402704000000, "170": 1347753600000, "171": 1414972800000, "172": 1385683200000, "173": 1309478400000, "174": 1300579200000, "175": 1192492800000, "176": 1195430400000, "177": 1255305600000, "178": 1352678400000, "179": 1232064000000, "180": 1276041600000, "181": 1166745600000, "182": 1292716800000, "183": 1293235200000, "184": 1357689600000, "185": 1385942400000, "186": 1172707200000, "187": 1318032000000, "188": 1357862400000, "189": 1388016000000, "190": 1301270400000, "191": 1254960000000, "192": 1104883200000, "193": 1221264000000, "194": 1242172800000, "195": 1298851200000, "196": 1193702400000, "197": 1361059200000, "198": 1198195200000, "199": 1319241600000, "200": 1258243200000, "201": 1246320000000, "202": 1195516800000, "203": 1326844800000, "204": 1325030400000, "205": 1305331200000, "206": 1259193600000, "207": 1228176000000, "208": 1230940800000, "209": 1161561600000, "210": 1371081600000, "211": 1192665600000, "212": 1180396800000, "213": 1317859200000, "214": 1278288000000, "215": 1289692800000, "216": 1395360000000, "217": 1104624000000, "218": 1301443200000, "219": 1326585600000, "220": 1230163200000, "221": 1264032000000, "222": 1321833600000, "223": 1355270400000, "224": 1202256000000, "225": 1202256000000, "226": 1397088000000, "227": 1162166400000, "228": 1283904000000, "229": 1192579200000, "230": 1385424000000, "231": 1198540800000, "232": 1161475200000, "233": 1351036800000, "234": 1196726400000, "235": 1154217600000, "236": 1261612800000, "237": 1196726400000, "238": 1132531200000, "239": 1381536000000, "240": 1384819200000, "241": 1290816000000, "242": 1236297600000, "243": 1158105600000, "244": 1323388800000, "245": 1163376000000, "246": 1136678400000, "247": 1359676800000, "248": 1320019200000, "249": 1162944000000, "250": 1325376000000, "251": 1288137600000, "252": 1205625600000, "253": 1326153600000, "254": 1390176000000, "255": 1247529600000, "256": 1349654400000, "257": 1315785600000, "258": 1315785600000, "259": 1417737600000, "260": 1222214400000, "261": 1259366400000, "262": 1224460800000, "263": 1231545600000, "264": 1181174400000, "265": 1101427200000, "266": 1302825600000}, "rank": {"0": 2, "1": 2, "2": 2, "3": 2, "4": 2, "5": 2, "6": 2, "7": 2, "8": 2, "9": 2, "10": 2, "11": 2, "12": 2, "13": 2, "14": 2, "15": 2, "16": 2, "17": 2, "18": 2, "19": 2, "20": 2, "21": 2, "22": 2, "23": 2, "24": 2, "25": 2, "26": 2, "27": 2, "28": 2, "29": 2, "30": 2, "31": 2, "32": 2, "33": 2, "34": 2, "35": 2, "36": 2, "37": 2, "38": 2, "39": 2, "40": 2, "41": 2, "42": 2, "43": 2, "44": 2, "45": 2, "46": 2, "47": 2, "48": 2, "49": 2, "50": 2, "51": 2, "52": 2, "53": 2, "54": 2, "55": 2, "56": 2, "57": 2, "58": 2, "59": 2, "60": 2, "61": 2, "62": 2, "63": 2, "64": 2, "65": 2, "66": 2, "67": 2, "68": 2, "69": 2, "70": 2, "71": 2, "72": 2, "73": 2, "74": 2, "75": 2, "76": 2, "77": 2, "78": 2, "79": 2, "80": 2, "81": 2, "82": 2, "83": 2, "84": 2, "85": 2, "86": 2, "87": 2, "88": 2, "89": 2, "90": 2, "91": 2, "92": 2, "93": 2, "94": 2, "95": 2, "96": 2, "97": 2, "98": 2, "99": 2, "100": 2, "101": 2, "102": 2, "103": 2, "104": 2, "105": 2, "106": 2, "107": 2, "108": 2, "109": 2, "110": 2, "111": 2, "112": 2, "113": 2, "114": 2, "115": 2, "116": 2, "117": 2, "118": 2, "119": 2, "120": 2, "121": 2, "122": 2, "123": 2, "124": 2, "125": 2, "126": 2, "127": 2, "128": 2, "129": 2, "130": 2, "131": 2, "132": 2, "133": 2, "134": 2, "135": 2, "136": 2, "137": 2, "138": 2, "139": 2, "140": 2, "141": 2, "142": 2, "143": 2, "144": 2, "145": 2, "146": 2, "147": 2, "148": 2, "149": 2, "150": 2, "151": 2, "152": 2, "153": 2, "154": 2, "155": 2, "156": 2, "157": 2, "158": 2, "159": 2, "160": 2, "161": 2, "162": 2, "163": 2, "164": 2, "165": 2, "166": 2, "167": 2, "168": 2, "169": 2, "170": 2, "171": 2, "172": 2, "173": 2, "174": 2, "175": 2, "176": 2, "177": 2, "178": 2, "179": 2, "180": 2, "181": 2, "182": 2, "183": 2, "184": 2, "185": 2, "186": 2, "187": 2, "188": 2, "189": 2, "190": 2, "191": 2, "192": 2, "193": 2, "194": 2, "195": 2, "196": 2, "197": 2, "198": 2, "199": 2, "200": 2, "201": 2, "202": 2, "203": 2, "204": 2, "205": 2, "206": 2, "207": 2, "208": 2, "209": 2, "210": 2, "211": 2, "212": 2, "213": 2, "214": 2, "215": 2, "216": 2, "217": 2, "218": 2, "219": 2, "220": 2, "221": 2, "222": 2, "223": 2, "224": 2, "225": 2, "226": 2, "227": 2, "228": 2, "229": 2, "230": 2, "231": 2, "232": 2, "233": 2, "234": 2, "235": 2, "236": 2, "237": 2, "238": 2, "239": 2, "240": 2, "241": 2, "242": 2, "243": 2, "244": 2, "245": 2, "246": 2, "247": 2, "248": 2, "249": 2, "250": 2, "251": 2, "252": 2, "253": 2, "254": 2, "255": 2, "256": 2, "257": 2, "258": 2, "259": 2, "260": 2, "261": 2, "262": 2, "263": 2, "264": 2, "265": 2, "266": 2}}, "answer_code": "SELECT  *\nFROM\n (SELECT\n  schools.short_name,\n  CONCAT(base_users.first_name, ' ', base_users.last_name),\n  base_users.date_birth,\n  rank() OVER (PARTITION BY pupil_classes.id ORDER BY base_users.date_birth) as rank\n FROM pupils\n INNER JOIN pupil_classes ON pupils.pupil_class_id = pupil_classes.id\n INNER JOIN base_users ON pupils.base_user_id = base_users.id\n INNER JOIN schools ON pupil_classes.school_id = schools.id\n ) as ss\nWHERE rank = 2\n\n", "type": null}
2023-03-15 19:19:08,540 - answering.answering - INFO | Answer type changed to AnswerType.TABLE
2023-03-15 19:19:08,540 - tg_bot.tg_main - INFO | answer builded successful
2023-03-15 19:19:08,923 - __main__ - ERROR | Your DataFrame has more than 100 rows and will produce a huge image file, possibly causing your computer to crash. Override this error by explicitly setting `max_rows`. Use -1 for all rows.
Traceback (most recent call last):
  File "c:\Users\Maxim\Documents\Coding\DataMonsterAI\.venv\Lib\site-packages\telegram\ext\_application.py", line 1104, in process_update
    await coroutine
  File "c:\Users\Maxim\Documents\Coding\DataMonsterAI\.venv\Lib\site-packages\telegram\ext\_handler.py", line 141, in handle_update
    return await self.callback(update, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Maxim\Documents\Coding\DataMonsterAI\tg_bot\tg_main.py", line 72, in answer_question
    drawer.draw_table(answer.answer_result, filename)
  File "C:\Users\Maxim\Documents\Coding\DataMonsterAI\answering\drawer.py", line 4, in draw_table
    dfi.export(db_response_df, filename, table_conversion="matplotlib")
  File "c:\Users\Maxim\Documents\Coding\DataMonsterAI\.venv\Lib\site-packages\dataframe_image\_pandas_accessor.py", line 48, in export
    return _export(
           ^^^^^^^^
  File "c:\Users\Maxim\Documents\Coding\DataMonsterAI\.venv\Lib\site-packages\dataframe_image\_pandas_accessor.py", line 88, in _export
    raise ValueError(error_msg)
ValueError: Your DataFrame has more than 100 rows and will produce a huge image file, possibly causing your computer to crash. Override this error by explicitly setting `max_rows`. Use -1 for all rows.
2023-03-15 19:19:08,937 - telegram.ext._application - ERROR | An error was raised and an uncaught error was raised while handling the error with an error_handler.
Traceback (most recent call last):
  File "c:\Users\Maxim\Documents\Coding\DataMonsterAI\.venv\Lib\site-packages\telegram\ext\_application.py", line 1104, in process_update
    await coroutine
  File "c:\Users\Maxim\Documents\Coding\DataMonsterAI\.venv\Lib\site-packages\telegram\ext\_handler.py", line 141, in handle_update
    return await self.callback(update, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Maxim\Documents\Coding\DataMonsterAI\tg_bot\tg_main.py", line 72, in answer_question
    drawer.draw_table(answer.answer_result, filename)
  File "C:\Users\Maxim\Documents\Coding\DataMonsterAI\answering\drawer.py", line 4, in draw_table
    dfi.export(db_response_df, filename, table_conversion="matplotlib")
  File "c:\Users\Maxim\Documents\Coding\DataMonsterAI\.venv\Lib\site-packages\dataframe_image\_pandas_accessor.py", line 48, in export
    return _export(
           ^^^^^^^^
  File "c:\Users\Maxim\Documents\Coding\DataMonsterAI\.venv\Lib\site-packages\dataframe_image\_pandas_accessor.py", line 88, in _export
    raise ValueError(error_msg)
ValueError: Your DataFrame has more than 100 rows and will produce a huge image file, possibly causing your computer to crash. Override this error by explicitly setting `max_rows`. Use -1 for all rows.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\Maxim\Documents\Coding\DataMonsterAI\.venv\Lib\site-packages\telegram\ext\_application.py", line 1617, in process_error
    await callback(update, context)
TypeError: object NoneType can't be used in 'await' expression
2023-03-15 20:25:56,158 - __main__ - INFO | Start application
2023-03-15 20:25:56,661 - telegram.ext._application - INFO | Application started
2023-03-15 20:26:36,521 - tg_bot.tg_main - INFO | answering question started
2023-03-15 20:26:36,885 - tg_bot.tg_main - INFO | Building answer..
2023-03-15 20:26:36,993 - tg_bot.correction - INFO | For question 'the middle-aged pupil in each class in any random school' following corrections returned:
2023-03-15 20:26:36,993 - tg_bot.correction - INFO | ["the oldest pupil in each school", "names of menu items in school 12", "second names of 100 pupils from first classes"]
2023-03-15 20:26:36,993 - answering.answering - INFO | Got 3 examples for prompt
2023-03-15 20:26:36,993 - answering.answering - INFO | Prompt builded
2023-03-15 20:26:36,993 - answering.answering - INFO | Generation AI answers
2023-03-15 20:26:36,993 - ai - INFO | Asking AI with 5 retries and 30s timeout
2023-03-15 20:26:36,993 - ai - INFO | Trying 1...
2023-03-15 20:26:36,993 - ai - INFO | Asking AI...
2023-03-15 20:27:08,006 - openai - INFO | error_code=None error_message='That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 700b26d934621926b6782ce21dceacfc in your message.)' error_param=None error_type=server_error message='OpenAI API error received' stream_error=False
2023-03-15 20:27:08,006 - ai - INFO | That model is currently overloaded with other requests. You can retry your request, or contact us through our help center at help.openai.com if the error persists. (Please include the request ID 700b26d934621926b6782ce21dceacfc in your message.)
2023-03-15 20:27:08,006 - ai - INFO | Waiting timeout...
2023-03-15 20:27:38,006 - ai - INFO | Trying 2...
2023-03-15 20:27:38,006 - ai - INFO | Asking AI...
